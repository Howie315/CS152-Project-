Terminals unused in grammar

   FOR
   TRUE
   FALSE
   DECIMAL


Grammar

    0 $accept: prog_start $end

    1 prog_start: functions
    2           | %empty

    3 functions: function
    4          | function functions

    5 func_ident: FUNCTION IDENTIFIER

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    7 arguements: arguement repeat_arguements
    8           | %empty

    9 repeat_arguements: COMMA arguement repeat_arguements
   10                  | %empty

   11 arguement: type IDENTIFIER

   12 type: VOID
   13     | INTEGER
   14     | BOOLEAN
   15     | DOUBLE
   16     | CHAR

   17 statements: statement SEMICOLON statements
   18           | controlstmt statements
   19           | %empty

   20 controlstmt: whilestmt
   21            | ifstmt

   22 statement: returnstmt
   23          | assignment
   24          | functioncall
   25          | declaration
   26          | output
   27          | continuestmt
   28          | breakstmt
   29          | expression

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE

   31 continuestmt: CONTINUE

   32 breakstmt: BREAK

   33 returnstmt: RETURN expression

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

   36 assignment: IDENTIFIER ASSIGN expression
   37           | array ASSIGN expression
   38           | IDENTIFIER ASSIGN functioncall
   39           | IDENTIFIER ASSIGN input

   40 functioncall: IDENTIFIER BEGINPARAM passingargs ENDPARAM

   41 passingargs: expression repeat_passingargs
   42            | %empty

   43 repeat_passingargs: COMMA expression repeat_arguements
   44                   | %empty

   45 declaration: type IDENTIFIER
   46            | type array

   47 input: INPUT BEGINPARAM ENDPARAM

   48 output: OUTPUT BEGINPARAM expression ENDPARAM

   49 array: IDENTIFIER BEGINBRACKET expression ENDBRACKET

   50 expression: assignexp

   51 assignexp: logicexp logicop assignexp
   52          | logicexp

   53 logicop: AND
   54        | OR

   55 logicexp: equalityexp eqop logicexp
   56         | equalityexp

   57 eqop: EQ
   58     | NE

   59 equalityexp: relationexp relop equalityexp
   60            | relationexp

   61 relop: LT
   62      | LTE
   63      | GT
   64      | GTE

   65 relationexp: addexp addop relationexp
   66            | addexp

   67 addop: ADD
   68      | SUB

   69 addexp: multexp multop addexp
   70       | multexp

   71 multop: MUL
   72       | DIV
   73       | MOD

   74 multexp: NOT term
   75        | term

   76 term: BEGINPARAM expression ENDPARAM
   77     | NUMBER
   78     | IDENTIFIER
   79     | array


Terminals, with rules where they appear

$end (0) 0
error (256)
DOUBLE (258) 15
BOOLEAN (259) 14
CHAR (260) 16
ASSIGN (261) 36 37 38 39
ADD (262) 67
SUB (263) 68
DIV (264) 72
MUL (265) 71
MOD (266) 73
EQ (267) 57
LT (268) 61
LTE (269) 62
GT (270) 63
GTE (271) 64
NE (272) 58
FUNCTION (273) 5
BEGINSCOPE (274) 6 30 34 35
ENDSCOPE (275) 6 30 34 35
BEGINPARAM (276) 6 30 34 35 40 47 48 76
ENDPARAM (277) 6 30 34 35 40 47 48 76
BEGINBRACKET (278) 49
ENDBRACKET (279) 49
IF (280) 34 35
ELSE (281) 35
FOR (282)
WHILE (283) 30
CONTINUE (284) 31
BREAK (285) 32
TRUE (286)
FALSE (287)
RETURN (288) 33
VOID (289) 12
NOT (290) 74
AND (291) 53
OR (292) 54
SEMICOLON (293) 17
COMMA (294) 9 43
OUTPUT (295) 48
INPUT (296) 47
NUMBER (297) 77
DECIMAL (298)
INTEGER (299) 13
IDENTIFIER (300) 5 11 36 38 39 40 45 49 78


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
prog_start (47)
    on left: 1 2, on right: 0
functions (48)
    on left: 3 4, on right: 1 4
func_ident (49)
    on left: 5, on right: 6
function (50)
    on left: 6, on right: 3 4
arguements (51)
    on left: 7 8, on right: 6
repeat_arguements (52)
    on left: 9 10, on right: 7 9 43
arguement (53)
    on left: 11, on right: 7 9
type (54)
    on left: 12 13 14 15 16, on right: 6 11 45 46
statements (55)
    on left: 17 18 19, on right: 6 17 18 30 34 35
controlstmt (56)
    on left: 20 21, on right: 18
statement (57)
    on left: 22 23 24 25 26 27 28 29, on right: 17
whilestmt (58)
    on left: 30, on right: 20
continuestmt (59)
    on left: 31, on right: 27
breakstmt (60)
    on left: 32, on right: 28
returnstmt (61)
    on left: 33, on right: 22
ifstmt (62)
    on left: 34 35, on right: 21
assignment (63)
    on left: 36 37 38 39, on right: 23
functioncall (64)
    on left: 40, on right: 24 38
passingargs (65)
    on left: 41 42, on right: 40
repeat_passingargs (66)
    on left: 43 44, on right: 41
declaration (67)
    on left: 45 46, on right: 25
input (68)
    on left: 47, on right: 39
output (69)
    on left: 48, on right: 26
array (70)
    on left: 49, on right: 37 46 79
expression (71)
    on left: 50, on right: 29 30 33 34 35 36 37 41 43 48 49 76
assignexp (72)
    on left: 51 52, on right: 50 51
logicop (73)
    on left: 53 54, on right: 51
logicexp (74)
    on left: 55 56, on right: 51 52 55
eqop (75)
    on left: 57 58, on right: 55
equalityexp (76)
    on left: 59 60, on right: 55 56 59
relop (77)
    on left: 61 62 63 64, on right: 59
relationexp (78)
    on left: 65 66, on right: 59 60 65
addop (79)
    on left: 67 68, on right: 65
addexp (80)
    on left: 69 70, on right: 65 66 69
multop (81)
    on left: 71 72 73, on right: 69
multexp (82)
    on left: 74 75, on right: 69 70
term (83)
    on left: 76 77 78 79, on right: 74 75


State 0

    0 $accept: . prog_start $end

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 2 (prog_start)

    prog_start  go to state 6
    functions   go to state 7
    function    go to state 8
    type        go to state 9


State 1

   15 type: DOUBLE .

    $default  reduce using rule 15 (type)


State 2

   14 type: BOOLEAN .

    $default  reduce using rule 14 (type)


State 3

   16 type: CHAR .

    $default  reduce using rule 16 (type)


State 4

   12 type: VOID .

    $default  reduce using rule 12 (type)


State 5

   13 type: INTEGER .

    $default  reduce using rule 13 (type)


State 6

    0 $accept: prog_start . $end

    $end  shift, and go to state 10


State 7

    1 prog_start: functions .

    $default  reduce using rule 1 (prog_start)


State 8

    3 functions: function .
    4          | function . functions

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 3 (functions)

    functions  go to state 11
    function   go to state 8
    type       go to state 9


State 9

    6 function: type . func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    FUNCTION  shift, and go to state 12

    func_ident  go to state 13


State 10

    0 $accept: prog_start $end .

    $default  accept


State 11

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 12

    5 func_ident: FUNCTION . IDENTIFIER

    IDENTIFIER  shift, and go to state 14


State 13

    6 function: type func_ident . BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 15


State 14

    5 func_ident: FUNCTION IDENTIFIER .

    $default  reduce using rule 5 (func_ident)


State 15

    6 function: type func_ident BEGINPARAM . arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 8 (arguements)

    arguements  go to state 16
    arguement   go to state 17
    type        go to state 18


State 16

    6 function: type func_ident BEGINPARAM arguements . ENDPARAM BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 19


State 17

    7 arguements: arguement . repeat_arguements

    COMMA  shift, and go to state 20

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 21


State 18

   11 arguement: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 22


State 19

    6 function: type func_ident BEGINPARAM arguements ENDPARAM . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 23


State 20

    9 repeat_arguements: COMMA . arguement repeat_arguements

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    arguement  go to state 24
    type       go to state 18


State 21

    7 arguements: arguement repeat_arguements .

    $default  reduce using rule 7 (arguements)


State 22

   11 arguement: type IDENTIFIER .

    $default  reduce using rule 11 (arguement)


State 23

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    NUMBER      shift, and go to state 33
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 34

    $default  reduce using rule 19 (statements)

    type          go to state 35
    statements    go to state 36
    controlstmt   go to state 37
    statement     go to state 38
    whilestmt     go to state 39
    continuestmt  go to state 40
    breakstmt     go to state 41
    returnstmt    go to state 42
    ifstmt        go to state 43
    assignment    go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    output        go to state 47
    array         go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 24

    9 repeat_arguements: COMMA arguement . repeat_arguements

    COMMA  shift, and go to state 20

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 57


State 25

   76 term: BEGINPARAM . expression ENDPARAM

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array        go to state 59
    expression   go to state 60
    assignexp    go to state 50
    logicexp     go to state 51
    equalityexp  go to state 52
    relationexp  go to state 53
    addexp       go to state 54
    multexp      go to state 55
    term         go to state 56


State 26

   34 ifstmt: IF . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 61


State 27

   30 whilestmt: WHILE . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 62


State 28

   31 continuestmt: CONTINUE .

    $default  reduce using rule 31 (continuestmt)


State 29

   32 breakstmt: BREAK .

    $default  reduce using rule 32 (breakstmt)


State 30

   33 returnstmt: RETURN . expression

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array        go to state 59
    expression   go to state 63
    assignexp    go to state 50
    logicexp     go to state 51
    equalityexp  go to state 52
    relationexp  go to state 53
    addexp       go to state 54
    multexp      go to state 55
    term         go to state 56


State 31

   74 multexp: NOT . term

    BEGINPARAM  shift, and go to state 25
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array  go to state 59
    term   go to state 64


State 32

   48 output: OUTPUT . BEGINPARAM expression ENDPARAM

    BEGINPARAM  shift, and go to state 65


State 33

   77 term: NUMBER .

    $default  reduce using rule 77 (term)


State 34

   36 assignment: IDENTIFIER . ASSIGN expression
   38           | IDENTIFIER . ASSIGN functioncall
   39           | IDENTIFIER . ASSIGN input
   40 functioncall: IDENTIFIER . BEGINPARAM passingargs ENDPARAM
   49 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET
   78 term: IDENTIFIER .

    ASSIGN        shift, and go to state 66
    BEGINPARAM    shift, and go to state 67
    BEGINBRACKET  shift, and go to state 68

    $default  reduce using rule 78 (term)


State 35

   45 declaration: type . IDENTIFIER
   46            | type . array

    IDENTIFIER  shift, and go to state 69

    array  go to state 70


State 36

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 71


State 37

   18 statements: controlstmt . statements

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    NUMBER      shift, and go to state 33
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 34

    $default  reduce using rule 19 (statements)

    type          go to state 35
    statements    go to state 72
    controlstmt   go to state 37
    statement     go to state 38
    whilestmt     go to state 39
    continuestmt  go to state 40
    breakstmt     go to state 41
    returnstmt    go to state 42
    ifstmt        go to state 43
    assignment    go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    output        go to state 47
    array         go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 38

   17 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 73


State 39

   20 controlstmt: whilestmt .

    $default  reduce using rule 20 (controlstmt)


State 40

   27 statement: continuestmt .

    $default  reduce using rule 27 (statement)


State 41

   28 statement: breakstmt .

    $default  reduce using rule 28 (statement)


State 42

   22 statement: returnstmt .

    $default  reduce using rule 22 (statement)


State 43

   21 controlstmt: ifstmt .

    $default  reduce using rule 21 (controlstmt)


State 44

   23 statement: assignment .

    $default  reduce using rule 23 (statement)


State 45

   24 statement: functioncall .

    $default  reduce using rule 24 (statement)


State 46

   25 statement: declaration .

    $default  reduce using rule 25 (statement)


State 47

   26 statement: output .

    $default  reduce using rule 26 (statement)


State 48

   37 assignment: array . ASSIGN expression
   79 term: array .

    ASSIGN  shift, and go to state 74

    $default  reduce using rule 79 (term)


State 49

   29 statement: expression .

    $default  reduce using rule 29 (statement)


State 50

   50 expression: assignexp .

    $default  reduce using rule 50 (expression)


State 51

   51 assignexp: logicexp . logicop assignexp
   52          | logicexp .

    AND  shift, and go to state 75
    OR   shift, and go to state 76

    $default  reduce using rule 52 (assignexp)

    logicop  go to state 77


State 52

   55 logicexp: equalityexp . eqop logicexp
   56         | equalityexp .

    EQ  shift, and go to state 78
    NE  shift, and go to state 79

    $default  reduce using rule 56 (logicexp)

    eqop  go to state 80


State 53

   59 equalityexp: relationexp . relop equalityexp
   60            | relationexp .

    LT   shift, and go to state 81
    LTE  shift, and go to state 82
    GT   shift, and go to state 83
    GTE  shift, and go to state 84

    $default  reduce using rule 60 (equalityexp)

    relop  go to state 85


State 54

   65 relationexp: addexp . addop relationexp
   66            | addexp .

    ADD  shift, and go to state 86
    SUB  shift, and go to state 87

    $default  reduce using rule 66 (relationexp)

    addop  go to state 88


State 55

   69 addexp: multexp . multop addexp
   70       | multexp .

    DIV  shift, and go to state 89
    MUL  shift, and go to state 90
    MOD  shift, and go to state 91

    $default  reduce using rule 70 (addexp)

    multop  go to state 92


State 56

   75 multexp: term .

    $default  reduce using rule 75 (multexp)


State 57

    9 repeat_arguements: COMMA arguement repeat_arguements .

    $default  reduce using rule 9 (repeat_arguements)


State 58

   49 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET
   78 term: IDENTIFIER .

    BEGINBRACKET  shift, and go to state 68

    $default  reduce using rule 78 (term)


State 59

   79 term: array .

    $default  reduce using rule 79 (term)


State 60

   76 term: BEGINPARAM expression . ENDPARAM

    ENDPARAM  shift, and go to state 93


State 61

   34 ifstmt: IF BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array        go to state 59
    expression   go to state 94
    assignexp    go to state 50
    logicexp     go to state 51
    equalityexp  go to state 52
    relationexp  go to state 53
    addexp       go to state 54
    multexp      go to state 55
    term         go to state 56


State 62

   30 whilestmt: WHILE BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array        go to state 59
    expression   go to state 95
    assignexp    go to state 50
    logicexp     go to state 51
    equalityexp  go to state 52
    relationexp  go to state 53
    addexp       go to state 54
    multexp      go to state 55
    term         go to state 56


State 63

   33 returnstmt: RETURN expression .

    $default  reduce using rule 33 (returnstmt)


State 64

   74 multexp: NOT term .

    $default  reduce using rule 74 (multexp)


State 65

   48 output: OUTPUT BEGINPARAM . expression ENDPARAM

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array        go to state 59
    expression   go to state 96
    assignexp    go to state 50
    logicexp     go to state 51
    equalityexp  go to state 52
    relationexp  go to state 53
    addexp       go to state 54
    multexp      go to state 55
    term         go to state 56


State 66

   36 assignment: IDENTIFIER ASSIGN . expression
   38           | IDENTIFIER ASSIGN . functioncall
   39           | IDENTIFIER ASSIGN . input

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 97
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 98

    functioncall  go to state 99
    input         go to state 100
    array         go to state 59
    expression    go to state 101
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 67

   40 functioncall: IDENTIFIER BEGINPARAM . passingargs ENDPARAM

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    $default  reduce using rule 42 (passingargs)

    passingargs  go to state 102
    array        go to state 59
    expression   go to state 103
    assignexp    go to state 50
    logicexp     go to state 51
    equalityexp  go to state 52
    relationexp  go to state 53
    addexp       go to state 54
    multexp      go to state 55
    term         go to state 56


State 68

   49 array: IDENTIFIER BEGINBRACKET . expression ENDBRACKET

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array        go to state 59
    expression   go to state 104
    assignexp    go to state 50
    logicexp     go to state 51
    equalityexp  go to state 52
    relationexp  go to state 53
    addexp       go to state 54
    multexp      go to state 55
    term         go to state 56


State 69

   45 declaration: type IDENTIFIER .
   49 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET

    BEGINBRACKET  shift, and go to state 68

    $default  reduce using rule 45 (declaration)


State 70

   46 declaration: type array .

    $default  reduce using rule 46 (declaration)


State 71

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 6 (function)


State 72

   18 statements: controlstmt statements .

    $default  reduce using rule 18 (statements)


State 73

   17 statements: statement SEMICOLON . statements

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    NUMBER      shift, and go to state 33
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 34

    $default  reduce using rule 19 (statements)

    type          go to state 35
    statements    go to state 105
    controlstmt   go to state 37
    statement     go to state 38
    whilestmt     go to state 39
    continuestmt  go to state 40
    breakstmt     go to state 41
    returnstmt    go to state 42
    ifstmt        go to state 43
    assignment    go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    output        go to state 47
    array         go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 74

   37 assignment: array ASSIGN . expression

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array        go to state 59
    expression   go to state 106
    assignexp    go to state 50
    logicexp     go to state 51
    equalityexp  go to state 52
    relationexp  go to state 53
    addexp       go to state 54
    multexp      go to state 55
    term         go to state 56


State 75

   53 logicop: AND .

    $default  reduce using rule 53 (logicop)


State 76

   54 logicop: OR .

    $default  reduce using rule 54 (logicop)


State 77

   51 assignexp: logicexp logicop . assignexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array        go to state 59
    assignexp    go to state 107
    logicexp     go to state 51
    equalityexp  go to state 52
    relationexp  go to state 53
    addexp       go to state 54
    multexp      go to state 55
    term         go to state 56


State 78

   57 eqop: EQ .

    $default  reduce using rule 57 (eqop)


State 79

   58 eqop: NE .

    $default  reduce using rule 58 (eqop)


State 80

   55 logicexp: equalityexp eqop . logicexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array        go to state 59
    logicexp     go to state 108
    equalityexp  go to state 52
    relationexp  go to state 53
    addexp       go to state 54
    multexp      go to state 55
    term         go to state 56


State 81

   61 relop: LT .

    $default  reduce using rule 61 (relop)


State 82

   62 relop: LTE .

    $default  reduce using rule 62 (relop)


State 83

   63 relop: GT .

    $default  reduce using rule 63 (relop)


State 84

   64 relop: GTE .

    $default  reduce using rule 64 (relop)


State 85

   59 equalityexp: relationexp relop . equalityexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array        go to state 59
    equalityexp  go to state 109
    relationexp  go to state 53
    addexp       go to state 54
    multexp      go to state 55
    term         go to state 56


State 86

   67 addop: ADD .

    $default  reduce using rule 67 (addop)


State 87

   68 addop: SUB .

    $default  reduce using rule 68 (addop)


State 88

   65 relationexp: addexp addop . relationexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array        go to state 59
    relationexp  go to state 110
    addexp       go to state 54
    multexp      go to state 55
    term         go to state 56


State 89

   72 multop: DIV .

    $default  reduce using rule 72 (multop)


State 90

   71 multop: MUL .

    $default  reduce using rule 71 (multop)


State 91

   73 multop: MOD .

    $default  reduce using rule 73 (multop)


State 92

   69 addexp: multexp multop . addexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array    go to state 59
    addexp   go to state 111
    multexp  go to state 55
    term     go to state 56


State 93

   76 term: BEGINPARAM expression ENDPARAM .

    $default  reduce using rule 76 (term)


State 94

   34 ifstmt: IF BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 112


State 95

   30 whilestmt: WHILE BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 113


State 96

   48 output: OUTPUT BEGINPARAM expression . ENDPARAM

    ENDPARAM  shift, and go to state 114


State 97

   47 input: INPUT . BEGINPARAM ENDPARAM

    BEGINPARAM  shift, and go to state 115


State 98

   40 functioncall: IDENTIFIER . BEGINPARAM passingargs ENDPARAM
   49 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET
   78 term: IDENTIFIER .

    BEGINPARAM    shift, and go to state 67
    BEGINBRACKET  shift, and go to state 68

    $default  reduce using rule 78 (term)


State 99

   38 assignment: IDENTIFIER ASSIGN functioncall .

    $default  reduce using rule 38 (assignment)


State 100

   39 assignment: IDENTIFIER ASSIGN input .

    $default  reduce using rule 39 (assignment)


State 101

   36 assignment: IDENTIFIER ASSIGN expression .

    $default  reduce using rule 36 (assignment)


State 102

   40 functioncall: IDENTIFIER BEGINPARAM passingargs . ENDPARAM

    ENDPARAM  shift, and go to state 116


State 103

   41 passingargs: expression . repeat_passingargs

    COMMA  shift, and go to state 117

    $default  reduce using rule 44 (repeat_passingargs)

    repeat_passingargs  go to state 118


State 104

   49 array: IDENTIFIER BEGINBRACKET expression . ENDBRACKET

    ENDBRACKET  shift, and go to state 119


State 105

   17 statements: statement SEMICOLON statements .

    $default  reduce using rule 17 (statements)


State 106

   37 assignment: array ASSIGN expression .

    $default  reduce using rule 37 (assignment)


State 107

   51 assignexp: logicexp logicop assignexp .

    $default  reduce using rule 51 (assignexp)


State 108

   55 logicexp: equalityexp eqop logicexp .

    $default  reduce using rule 55 (logicexp)


State 109

   59 equalityexp: relationexp relop equalityexp .

    $default  reduce using rule 59 (equalityexp)


State 110

   65 relationexp: addexp addop relationexp .

    $default  reduce using rule 65 (relationexp)


State 111

   69 addexp: multexp multop addexp .

    $default  reduce using rule 69 (addexp)


State 112

   34 ifstmt: IF BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 120


State 113

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 121


State 114

   48 output: OUTPUT BEGINPARAM expression ENDPARAM .

    $default  reduce using rule 48 (output)


State 115

   47 input: INPUT BEGINPARAM . ENDPARAM

    ENDPARAM  shift, and go to state 122


State 116

   40 functioncall: IDENTIFIER BEGINPARAM passingargs ENDPARAM .

    $default  reduce using rule 40 (functioncall)


State 117

   43 repeat_passingargs: COMMA . expression repeat_arguements

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 58

    array        go to state 59
    expression   go to state 123
    assignexp    go to state 50
    logicexp     go to state 51
    equalityexp  go to state 52
    relationexp  go to state 53
    addexp       go to state 54
    multexp      go to state 55
    term         go to state 56


State 118

   41 passingargs: expression repeat_passingargs .

    $default  reduce using rule 41 (passingargs)


State 119

   49 array: IDENTIFIER BEGINBRACKET expression ENDBRACKET .

    $default  reduce using rule 49 (array)


State 120

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    NUMBER      shift, and go to state 33
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 34

    $default  reduce using rule 19 (statements)

    type          go to state 35
    statements    go to state 124
    controlstmt   go to state 37
    statement     go to state 38
    whilestmt     go to state 39
    continuestmt  go to state 40
    breakstmt     go to state 41
    returnstmt    go to state 42
    ifstmt        go to state 43
    assignment    go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    output        go to state 47
    array         go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 121

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    NUMBER      shift, and go to state 33
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 34

    $default  reduce using rule 19 (statements)

    type          go to state 35
    statements    go to state 125
    controlstmt   go to state 37
    statement     go to state 38
    whilestmt     go to state 39
    continuestmt  go to state 40
    breakstmt     go to state 41
    returnstmt    go to state 42
    ifstmt        go to state 43
    assignment    go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    output        go to state 47
    array         go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 122

   47 input: INPUT BEGINPARAM ENDPARAM .

    $default  reduce using rule 47 (input)


State 123

   43 repeat_passingargs: COMMA expression . repeat_arguements

    COMMA  shift, and go to state 20

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 126


State 124

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    ENDSCOPE  shift, and go to state 127


State 125

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 128


State 126

   43 repeat_passingargs: COMMA expression repeat_arguements .

    $default  reduce using rule 43 (repeat_passingargs)


State 127

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE .
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE . ELSE BEGINSCOPE statements ENDSCOPE

    ELSE  shift, and go to state 129

    $default  reduce using rule 34 (ifstmt)


State 128

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 30 (whilestmt)


State 129

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 130


State 130

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    NUMBER      shift, and go to state 33
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 34

    $default  reduce using rule 19 (statements)

    type          go to state 35
    statements    go to state 131
    controlstmt   go to state 37
    statement     go to state 38
    whilestmt     go to state 39
    continuestmt  go to state 40
    breakstmt     go to state 41
    returnstmt    go to state 42
    ifstmt        go to state 43
    assignment    go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    output        go to state 47
    array         go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 131

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 132


State 132

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 35 (ifstmt)
