Terminals unused in grammar

   FOR
   TRUE
   FALSE
   DECIMAL


Grammar

    0 $accept: prog_start $end

    1 prog_start: functions
    2           | %empty

    3 functions: function
    4          | function functions

    5 func_ident: FUNCTION IDENTIFIER

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    7 arguements: arguement repeat_arguements
    8           | %empty

    9 repeat_arguements: COMMA arguement repeat_arguements
   10                  | %empty

   11 arguement: type IDENTIFIER

   12 type: VOID
   13     | INTEGER
   14     | BOOLEAN
   15     | DOUBLE
   16     | CHAR

   17 statements: statement SEMICOLON statements
   18           | controlstmt statements
   19           | %empty

   20 controlstmt: whilestmt
   21            | ifstmt

   22 statement: returnstmt
   23          | declaration
   24          | output
   25          | continuestmt
   26          | breakstmt
   27          | expression

   28 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE

   29 continuestmt: CONTINUE

   30 breakstmt: BREAK

   31 returnstmt: RETURN expression

   32 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   33       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

   34 functioncall: IDENTIFIER BEGINPARAM passingargs ENDPARAM

   35 passingargs: expression repeat_passingargs
   36            | %empty

   37 repeat_passingargs: COMMA expression repeat_arguements
   38                   | %empty

   39 declaration: type IDENTIFIER
   40            | type array_declaration

   41 input: INPUT BEGINPARAM ENDPARAM

   42 output: OUTPUT BEGINPARAM expression ENDPARAM

   43 array_declaration: IDENTIFIER BEGINBRACKET NUMBER ENDBRACKET

   44 expression: assignexp
   45           | assignexp ASSIGN expression
   46           | IDENTIFIER BEGINBRACKET expression ENDBRACKET ASSIGN expression

   47 assignexp: logicexp logicop assignexp
   48          | logicexp

   49 logicop: AND
   50        | OR

   51 logicexp: equalityexp eqop logicexp
   52         | equalityexp

   53 eqop: EQ
   54     | NE

   55 equalityexp: relationexp relop equalityexp
   56            | relationexp

   57 relop: LT
   58      | LTE
   59      | GT
   60      | GTE

   61 relationexp: addexp addop relationexp
   62            | addexp

   63 addop: ADD
   64      | SUB

   65 addexp: multexp multop addexp
   66       | multexp

   67 multop: MUL
   68       | DIV
   69       | MOD

   70 multexp: NOT term
   71        | term

   72 term: BEGINPARAM expression ENDPARAM
   73     | NUMBER
   74     | IDENTIFIER
   75     | IDENTIFIER BEGINBRACKET BEGINBRACKET expression ENDBRACKET ENDBRACKET
   76     | functioncall
   77     | input


Terminals, with rules where they appear

$end (0) 0
error (256)
DOUBLE (258) 15
BOOLEAN (259) 14
CHAR (260) 16
ASSIGN (261) 45 46
ADD (262) 63
SUB (263) 64
DIV (264) 68
MUL (265) 67
MOD (266) 69
EQ (267) 53
LT (268) 57
LTE (269) 58
GT (270) 59
GTE (271) 60
NE (272) 54
FUNCTION (273) 5
BEGINSCOPE (274) 6 28 32 33
ENDSCOPE (275) 6 28 32 33
BEGINPARAM (276) 6 28 32 33 34 41 42 72
ENDPARAM (277) 6 28 32 33 34 41 42 72
BEGINBRACKET (278) 43 46 75
ENDBRACKET (279) 43 46 75
IF (280) 32 33
ELSE (281) 33
FOR (282)
WHILE (283) 28
CONTINUE (284) 29
BREAK (285) 30
TRUE (286)
FALSE (287)
RETURN (288) 31
VOID (289) 12
NOT (290) 70
AND (291) 49
OR (292) 50
SEMICOLON (293) 17
COMMA (294) 9 37
OUTPUT (295) 42
INPUT (296) 41
NUMBER (297) 43 73
DECIMAL (298)
INTEGER (299) 13
IDENTIFIER (300) 5 11 34 39 43 46 74 75


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
prog_start (47)
    on left: 1 2, on right: 0
functions (48)
    on left: 3 4, on right: 1 4
func_ident (49)
    on left: 5, on right: 6
function (50)
    on left: 6, on right: 3 4
arguements (51)
    on left: 7 8, on right: 6
repeat_arguements (52)
    on left: 9 10, on right: 7 9 37
arguement (53)
    on left: 11, on right: 7 9
type (54)
    on left: 12 13 14 15 16, on right: 6 11 39 40
statements (55)
    on left: 17 18 19, on right: 6 17 18 28 32 33
controlstmt (56)
    on left: 20 21, on right: 18
statement (57)
    on left: 22 23 24 25 26 27, on right: 17
whilestmt (58)
    on left: 28, on right: 20
continuestmt (59)
    on left: 29, on right: 25
breakstmt (60)
    on left: 30, on right: 26
returnstmt (61)
    on left: 31, on right: 22
ifstmt (62)
    on left: 32 33, on right: 21
functioncall (63)
    on left: 34, on right: 76
passingargs (64)
    on left: 35 36, on right: 34
repeat_passingargs (65)
    on left: 37 38, on right: 35
declaration (66)
    on left: 39 40, on right: 23
input (67)
    on left: 41, on right: 77
output (68)
    on left: 42, on right: 24
array_declaration (69)
    on left: 43, on right: 40
expression (70)
    on left: 44 45 46, on right: 27 28 31 32 33 35 37 42 45 46 72 75
assignexp (71)
    on left: 47 48, on right: 44 45 47
logicop (72)
    on left: 49 50, on right: 47
logicexp (73)
    on left: 51 52, on right: 47 48 51
eqop (74)
    on left: 53 54, on right: 51
equalityexp (75)
    on left: 55 56, on right: 51 52 55
relop (76)
    on left: 57 58 59 60, on right: 55
relationexp (77)
    on left: 61 62, on right: 55 56 61
addop (78)
    on left: 63 64, on right: 61
addexp (79)
    on left: 65 66, on right: 61 62 65
multop (80)
    on left: 67 68 69, on right: 65
multexp (81)
    on left: 70 71, on right: 65 66
term (82)
    on left: 72 73 74 75 76 77, on right: 70 71


State 0

    0 $accept: . prog_start $end

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 2 (prog_start)

    prog_start  go to state 6
    functions   go to state 7
    function    go to state 8
    type        go to state 9


State 1

   15 type: DOUBLE .

    $default  reduce using rule 15 (type)


State 2

   14 type: BOOLEAN .

    $default  reduce using rule 14 (type)


State 3

   16 type: CHAR .

    $default  reduce using rule 16 (type)


State 4

   12 type: VOID .

    $default  reduce using rule 12 (type)


State 5

   13 type: INTEGER .

    $default  reduce using rule 13 (type)


State 6

    0 $accept: prog_start . $end

    $end  shift, and go to state 10


State 7

    1 prog_start: functions .

    $default  reduce using rule 1 (prog_start)


State 8

    3 functions: function .
    4          | function . functions

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 3 (functions)

    functions  go to state 11
    function   go to state 8
    type       go to state 9


State 9

    6 function: type . func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    FUNCTION  shift, and go to state 12

    func_ident  go to state 13


State 10

    0 $accept: prog_start $end .

    $default  accept


State 11

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 12

    5 func_ident: FUNCTION . IDENTIFIER

    IDENTIFIER  shift, and go to state 14


State 13

    6 function: type func_ident . BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 15


State 14

    5 func_ident: FUNCTION IDENTIFIER .

    $default  reduce using rule 5 (func_ident)


State 15

    6 function: type func_ident BEGINPARAM . arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 8 (arguements)

    arguements  go to state 16
    arguement   go to state 17
    type        go to state 18


State 16

    6 function: type func_ident BEGINPARAM arguements . ENDPARAM BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 19


State 17

    7 arguements: arguement . repeat_arguements

    COMMA  shift, and go to state 20

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 21


State 18

   11 arguement: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 22


State 19

    6 function: type func_ident BEGINPARAM arguements ENDPARAM . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 23


State 20

    9 repeat_arguements: COMMA . arguement repeat_arguements

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    arguement  go to state 24
    type       go to state 18


State 21

    7 arguements: arguement repeat_arguements .

    $default  reduce using rule 7 (arguements)


State 22

   11 arguement: type IDENTIFIER .

    $default  reduce using rule 11 (arguement)


State 23

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 19 (statements)

    type          go to state 36
    statements    go to state 37
    controlstmt   go to state 38
    statement     go to state 39
    whilestmt     go to state 40
    continuestmt  go to state 41
    breakstmt     go to state 42
    returnstmt    go to state 43
    ifstmt        go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    input         go to state 47
    output        go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 24

    9 repeat_arguements: COMMA arguement . repeat_arguements

    COMMA  shift, and go to state 20

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 57


State 25

   72 term: BEGINPARAM . expression ENDPARAM

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 58
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 26

   32 ifstmt: IF . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   33       | IF . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 59


State 27

   28 whilestmt: WHILE . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 60


State 28

   29 continuestmt: CONTINUE .

    $default  reduce using rule 29 (continuestmt)


State 29

   30 breakstmt: BREAK .

    $default  reduce using rule 30 (breakstmt)


State 30

   31 returnstmt: RETURN . expression

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 61
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 31

   70 multexp: NOT . term

    BEGINPARAM  shift, and go to state 25
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 62

    functioncall  go to state 45
    input         go to state 47
    term          go to state 63


State 32

   42 output: OUTPUT . BEGINPARAM expression ENDPARAM

    BEGINPARAM  shift, and go to state 64


State 33

   41 input: INPUT . BEGINPARAM ENDPARAM

    BEGINPARAM  shift, and go to state 65


State 34

   73 term: NUMBER .

    $default  reduce using rule 73 (term)


State 35

   34 functioncall: IDENTIFIER . BEGINPARAM passingargs ENDPARAM
   46 expression: IDENTIFIER . BEGINBRACKET expression ENDBRACKET ASSIGN expression
   74 term: IDENTIFIER .
   75     | IDENTIFIER . BEGINBRACKET BEGINBRACKET expression ENDBRACKET ENDBRACKET

    BEGINPARAM    shift, and go to state 66
    BEGINBRACKET  shift, and go to state 67

    $default  reduce using rule 74 (term)


State 36

   39 declaration: type . IDENTIFIER
   40            | type . array_declaration

    IDENTIFIER  shift, and go to state 68

    array_declaration  go to state 69


State 37

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 70


State 38

   18 statements: controlstmt . statements

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 19 (statements)

    type          go to state 36
    statements    go to state 71
    controlstmt   go to state 38
    statement     go to state 39
    whilestmt     go to state 40
    continuestmt  go to state 41
    breakstmt     go to state 42
    returnstmt    go to state 43
    ifstmt        go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    input         go to state 47
    output        go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 39

   17 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 72


State 40

   20 controlstmt: whilestmt .

    $default  reduce using rule 20 (controlstmt)


State 41

   25 statement: continuestmt .

    $default  reduce using rule 25 (statement)


State 42

   26 statement: breakstmt .

    $default  reduce using rule 26 (statement)


State 43

   22 statement: returnstmt .

    $default  reduce using rule 22 (statement)


State 44

   21 controlstmt: ifstmt .

    $default  reduce using rule 21 (controlstmt)


State 45

   76 term: functioncall .

    $default  reduce using rule 76 (term)


State 46

   23 statement: declaration .

    $default  reduce using rule 23 (statement)


State 47

   77 term: input .

    $default  reduce using rule 77 (term)


State 48

   24 statement: output .

    $default  reduce using rule 24 (statement)


State 49

   27 statement: expression .

    $default  reduce using rule 27 (statement)


State 50

   44 expression: assignexp .
   45           | assignexp . ASSIGN expression

    ASSIGN  shift, and go to state 73

    $default  reduce using rule 44 (expression)


State 51

   47 assignexp: logicexp . logicop assignexp
   48          | logicexp .

    AND  shift, and go to state 74
    OR   shift, and go to state 75

    $default  reduce using rule 48 (assignexp)

    logicop  go to state 76


State 52

   51 logicexp: equalityexp . eqop logicexp
   52         | equalityexp .

    EQ  shift, and go to state 77
    NE  shift, and go to state 78

    $default  reduce using rule 52 (logicexp)

    eqop  go to state 79


State 53

   55 equalityexp: relationexp . relop equalityexp
   56            | relationexp .

    LT   shift, and go to state 80
    LTE  shift, and go to state 81
    GT   shift, and go to state 82
    GTE  shift, and go to state 83

    $default  reduce using rule 56 (equalityexp)

    relop  go to state 84


State 54

   61 relationexp: addexp . addop relationexp
   62            | addexp .

    ADD  shift, and go to state 85
    SUB  shift, and go to state 86

    $default  reduce using rule 62 (relationexp)

    addop  go to state 87


State 55

   65 addexp: multexp . multop addexp
   66       | multexp .

    DIV  shift, and go to state 88
    MUL  shift, and go to state 89
    MOD  shift, and go to state 90

    $default  reduce using rule 66 (addexp)

    multop  go to state 91


State 56

   71 multexp: term .

    $default  reduce using rule 71 (multexp)


State 57

    9 repeat_arguements: COMMA arguement repeat_arguements .

    $default  reduce using rule 9 (repeat_arguements)


State 58

   72 term: BEGINPARAM expression . ENDPARAM

    ENDPARAM  shift, and go to state 92


State 59

   32 ifstmt: IF BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   33       | IF BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 93
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 60

   28 whilestmt: WHILE BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 94
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 61

   31 returnstmt: RETURN expression .

    $default  reduce using rule 31 (returnstmt)


State 62

   34 functioncall: IDENTIFIER . BEGINPARAM passingargs ENDPARAM
   74 term: IDENTIFIER .
   75     | IDENTIFIER . BEGINBRACKET BEGINBRACKET expression ENDBRACKET ENDBRACKET

    BEGINPARAM    shift, and go to state 66
    BEGINBRACKET  shift, and go to state 95

    $default  reduce using rule 74 (term)


State 63

   70 multexp: NOT term .

    $default  reduce using rule 70 (multexp)


State 64

   42 output: OUTPUT BEGINPARAM . expression ENDPARAM

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 96
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 65

   41 input: INPUT BEGINPARAM . ENDPARAM

    ENDPARAM  shift, and go to state 97


State 66

   34 functioncall: IDENTIFIER BEGINPARAM . passingargs ENDPARAM

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 36 (passingargs)

    functioncall  go to state 45
    passingargs   go to state 98
    input         go to state 47
    expression    go to state 99
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 67

   46 expression: IDENTIFIER BEGINBRACKET . expression ENDBRACKET ASSIGN expression
   75 term: IDENTIFIER BEGINBRACKET . BEGINBRACKET expression ENDBRACKET ENDBRACKET

    BEGINPARAM    shift, and go to state 25
    BEGINBRACKET  shift, and go to state 100
    NOT           shift, and go to state 31
    INPUT         shift, and go to state 33
    NUMBER        shift, and go to state 34
    IDENTIFIER    shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 101
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 68

   39 declaration: type IDENTIFIER .
   43 array_declaration: IDENTIFIER . BEGINBRACKET NUMBER ENDBRACKET

    BEGINBRACKET  shift, and go to state 102

    $default  reduce using rule 39 (declaration)


State 69

   40 declaration: type array_declaration .

    $default  reduce using rule 40 (declaration)


State 70

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 6 (function)


State 71

   18 statements: controlstmt statements .

    $default  reduce using rule 18 (statements)


State 72

   17 statements: statement SEMICOLON . statements

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 19 (statements)

    type          go to state 36
    statements    go to state 103
    controlstmt   go to state 38
    statement     go to state 39
    whilestmt     go to state 40
    continuestmt  go to state 41
    breakstmt     go to state 42
    returnstmt    go to state 43
    ifstmt        go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    input         go to state 47
    output        go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 73

   45 expression: assignexp ASSIGN . expression

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 104
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 74

   49 logicop: AND .

    $default  reduce using rule 49 (logicop)


State 75

   50 logicop: OR .

    $default  reduce using rule 50 (logicop)


State 76

   47 assignexp: logicexp logicop . assignexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 62

    functioncall  go to state 45
    input         go to state 47
    assignexp     go to state 105
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 77

   53 eqop: EQ .

    $default  reduce using rule 53 (eqop)


State 78

   54 eqop: NE .

    $default  reduce using rule 54 (eqop)


State 79

   51 logicexp: equalityexp eqop . logicexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 62

    functioncall  go to state 45
    input         go to state 47
    logicexp      go to state 106
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 80

   57 relop: LT .

    $default  reduce using rule 57 (relop)


State 81

   58 relop: LTE .

    $default  reduce using rule 58 (relop)


State 82

   59 relop: GT .

    $default  reduce using rule 59 (relop)


State 83

   60 relop: GTE .

    $default  reduce using rule 60 (relop)


State 84

   55 equalityexp: relationexp relop . equalityexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 62

    functioncall  go to state 45
    input         go to state 47
    equalityexp   go to state 107
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 85

   63 addop: ADD .

    $default  reduce using rule 63 (addop)


State 86

   64 addop: SUB .

    $default  reduce using rule 64 (addop)


State 87

   61 relationexp: addexp addop . relationexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 62

    functioncall  go to state 45
    input         go to state 47
    relationexp   go to state 108
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 88

   68 multop: DIV .

    $default  reduce using rule 68 (multop)


State 89

   67 multop: MUL .

    $default  reduce using rule 67 (multop)


State 90

   69 multop: MOD .

    $default  reduce using rule 69 (multop)


State 91

   65 addexp: multexp multop . addexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 62

    functioncall  go to state 45
    input         go to state 47
    addexp        go to state 109
    multexp       go to state 55
    term          go to state 56


State 92

   72 term: BEGINPARAM expression ENDPARAM .

    $default  reduce using rule 72 (term)


State 93

   32 ifstmt: IF BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE
   33       | IF BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 110


State 94

   28 whilestmt: WHILE BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 111


State 95

   75 term: IDENTIFIER BEGINBRACKET . BEGINBRACKET expression ENDBRACKET ENDBRACKET

    BEGINBRACKET  shift, and go to state 100


State 96

   42 output: OUTPUT BEGINPARAM expression . ENDPARAM

    ENDPARAM  shift, and go to state 112


State 97

   41 input: INPUT BEGINPARAM ENDPARAM .

    $default  reduce using rule 41 (input)


State 98

   34 functioncall: IDENTIFIER BEGINPARAM passingargs . ENDPARAM

    ENDPARAM  shift, and go to state 113


State 99

   35 passingargs: expression . repeat_passingargs

    COMMA  shift, and go to state 114

    $default  reduce using rule 38 (repeat_passingargs)

    repeat_passingargs  go to state 115


State 100

   75 term: IDENTIFIER BEGINBRACKET BEGINBRACKET . expression ENDBRACKET ENDBRACKET

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 116
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 101

   46 expression: IDENTIFIER BEGINBRACKET expression . ENDBRACKET ASSIGN expression

    ENDBRACKET  shift, and go to state 117


State 102

   43 array_declaration: IDENTIFIER BEGINBRACKET . NUMBER ENDBRACKET

    NUMBER  shift, and go to state 118


State 103

   17 statements: statement SEMICOLON statements .

    $default  reduce using rule 17 (statements)


State 104

   45 expression: assignexp ASSIGN expression .

    $default  reduce using rule 45 (expression)


State 105

   47 assignexp: logicexp logicop assignexp .

    $default  reduce using rule 47 (assignexp)


State 106

   51 logicexp: equalityexp eqop logicexp .

    $default  reduce using rule 51 (logicexp)


State 107

   55 equalityexp: relationexp relop equalityexp .

    $default  reduce using rule 55 (equalityexp)


State 108

   61 relationexp: addexp addop relationexp .

    $default  reduce using rule 61 (relationexp)


State 109

   65 addexp: multexp multop addexp .

    $default  reduce using rule 65 (addexp)


State 110

   32 ifstmt: IF BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE
   33       | IF BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 119


State 111

   28 whilestmt: WHILE BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 120


State 112

   42 output: OUTPUT BEGINPARAM expression ENDPARAM .

    $default  reduce using rule 42 (output)


State 113

   34 functioncall: IDENTIFIER BEGINPARAM passingargs ENDPARAM .

    $default  reduce using rule 34 (functioncall)


State 114

   37 repeat_passingargs: COMMA . expression repeat_arguements

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 121
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 115

   35 passingargs: expression repeat_passingargs .

    $default  reduce using rule 35 (passingargs)


State 116

   75 term: IDENTIFIER BEGINBRACKET BEGINBRACKET expression . ENDBRACKET ENDBRACKET

    ENDBRACKET  shift, and go to state 122


State 117

   46 expression: IDENTIFIER BEGINBRACKET expression ENDBRACKET . ASSIGN expression

    ASSIGN  shift, and go to state 123


State 118

   43 array_declaration: IDENTIFIER BEGINBRACKET NUMBER . ENDBRACKET

    ENDBRACKET  shift, and go to state 124


State 119

   32 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE
   33       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 19 (statements)

    type          go to state 36
    statements    go to state 125
    controlstmt   go to state 38
    statement     go to state 39
    whilestmt     go to state 40
    continuestmt  go to state 41
    breakstmt     go to state 42
    returnstmt    go to state 43
    ifstmt        go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    input         go to state 47
    output        go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 120

   28 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 19 (statements)

    type          go to state 36
    statements    go to state 126
    controlstmt   go to state 38
    statement     go to state 39
    whilestmt     go to state 40
    continuestmt  go to state 41
    breakstmt     go to state 42
    returnstmt    go to state 43
    ifstmt        go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    input         go to state 47
    output        go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 121

   37 repeat_passingargs: COMMA expression . repeat_arguements

    COMMA  shift, and go to state 20

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 127


State 122

   75 term: IDENTIFIER BEGINBRACKET BEGINBRACKET expression ENDBRACKET . ENDBRACKET

    ENDBRACKET  shift, and go to state 128


State 123

   46 expression: IDENTIFIER BEGINBRACKET expression ENDBRACKET ASSIGN . expression

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 129
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 124

   43 array_declaration: IDENTIFIER BEGINBRACKET NUMBER ENDBRACKET .

    $default  reduce using rule 43 (array_declaration)


State 125

   32 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE
   33       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    ENDSCOPE  shift, and go to state 130


State 126

   28 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 131


State 127

   37 repeat_passingargs: COMMA expression repeat_arguements .

    $default  reduce using rule 37 (repeat_passingargs)


State 128

   75 term: IDENTIFIER BEGINBRACKET BEGINBRACKET expression ENDBRACKET ENDBRACKET .

    $default  reduce using rule 75 (term)


State 129

   46 expression: IDENTIFIER BEGINBRACKET expression ENDBRACKET ASSIGN expression .

    $default  reduce using rule 46 (expression)


State 130

   32 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE .
   33       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE . ELSE BEGINSCOPE statements ENDSCOPE

    ELSE  shift, and go to state 132

    $default  reduce using rule 32 (ifstmt)


State 131

   28 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 28 (whilestmt)


State 132

   33 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 133


State 133

   33 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 19 (statements)

    type          go to state 36
    statements    go to state 134
    controlstmt   go to state 38
    statement     go to state 39
    whilestmt     go to state 40
    continuestmt  go to state 41
    breakstmt     go to state 42
    returnstmt    go to state 43
    ifstmt        go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    input         go to state 47
    output        go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 134

   33 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 135


State 135

   33 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 33 (ifstmt)
