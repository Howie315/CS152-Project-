Nonterminals useless in grammar

   function_ident
   symbol


Terminals unused in grammar

   FOR
   TRUE
   FALSE
   DECIMAL


Grammar

    0 $accept: prog_start $end

    1 prog_start: functions
    2           | %empty

    3 functions: function
    4          | function functions

    5 function: type FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    6 arguements: arguement repeat_arguements
    7           | %empty

    8 repeat_arguements: COMMA arguement repeat_arguements
    9                  | %empty

   10 arguement: type IDENTIFIER
   11          | type array

   12 type: VOID
   13     | INTEGER
   14     | BOOLEAN
   15     | DOUBLE
   16     | CHAR

   17 statements: statement SEMICOLON statements
   18           | controlstmt statements
   19           | %empty

   20 controlstmt: whilestmt
   21            | ifstmt

   22 statement: returnstmt
   23          | assignment
   24          | functioncall
   25          | declaration
   26          | io
   27          | continuestmt
   28          | breakstmt
   29          | expression

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE

   31 continuestmt: CONTINUE

   32 breakstmt: BREAK

   33 returnstmt: RETURN expression

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

   36 assignment: IDENTIFIER ASSIGN expression
   37           | array ASSIGN expression
   38           | IDENTIFIER ASSIGN functioncall
   39           | IDENTIFIER ASSIGN io

   40 functioncall: IDENTIFIER BEGINPARAM passingargs ENDPARAM

   41 passingargs: expression repeat_passingargs
   42            | %empty

   43 repeat_passingargs: COMMA expression repeat_arguements
   44                   | %empty

   45 declaration: type IDENTIFIER
   46            | type assignment
   47            | type array

   48 io: INPUT BEGINPARAM ENDPARAM
   49   | OUTPUT BEGINPARAM ref ENDPARAM

   50 ref: IDENTIFIER
   51    | array

   52 array: IDENTIFIER BEGINBRACKET expression ENDBRACKET

   53 expression: assignexp

   54 assignexp: logicexp logicop assignexp
   55          | logicexp

   56 logicop: AND
   57        | OR

   58 logicexp: equalityexp eqop logicexp
   59         | equalityexp

   60 eqop: EQ
   61     | NE

   62 equalityexp: relationexp relop equalityexp
   63            | relationexp

   64 relop: LT
   65      | LTE
   66      | GT
   67      | GTE

   68 relationexp: addexp addop relationexp
   69            | addexp

   70 addop: ADD
   71      | SUB

   72 addexp: multexp multop addexp
   73       | multexp

   74 multop: MUL
   75       | DIV
   76       | MOD

   77 multexp: NOT term
   78        | term

   79 term: BEGINPARAM expression ENDPARAM
   80     | NUMBER
   81     | ref


Terminals, with rules where they appear

$end (0) 0
error (256)
DOUBLE (258) 15
BOOLEAN (259) 14
CHAR (260) 16
ASSIGN (261) 36 37 38 39
ADD (262) 70
SUB (263) 71
DIV (264) 75
MUL (265) 74
MOD (266) 76
EQ (267) 60
LT (268) 64
LTE (269) 65
GT (270) 66
GTE (271) 67
NE (272) 61
FUNCTION (273) 5
BEGINSCOPE (274) 5 30 34 35
ENDSCOPE (275) 5 30 34 35
BEGINPARAM (276) 5 30 34 35 40 48 49 79
ENDPARAM (277) 5 30 34 35 40 48 49 79
BEGINBRACKET (278) 52
ENDBRACKET (279) 52
IF (280) 34 35
ELSE (281) 35
FOR (282)
WHILE (283) 30
CONTINUE (284) 31
BREAK (285) 32
TRUE (286)
FALSE (287)
RETURN (288) 33
VOID (289) 12
NOT (290) 77
AND (291) 56
OR (292) 57
SEMICOLON (293) 17
COMMA (294) 8 43
OUTPUT (295) 49
INPUT (296) 48
NUMBER (297) 80
DECIMAL (298)
INTEGER (299) 13
IDENTIFIER (300) 5 10 36 38 39 40 45 50 52


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
prog_start (47)
    on left: 1 2, on right: 0
functions (48)
    on left: 3 4, on right: 1 4
function (49)
    on left: 5, on right: 3 4
arguements (50)
    on left: 6 7, on right: 5
repeat_arguements (51)
    on left: 8 9, on right: 6 8 43
arguement (52)
    on left: 10 11, on right: 6 8
type (53)
    on left: 12 13 14 15 16, on right: 5 10 11 45 46 47
statements (54)
    on left: 17 18 19, on right: 5 17 18 30 34 35
controlstmt (55)
    on left: 20 21, on right: 18
statement (56)
    on left: 22 23 24 25 26 27 28 29, on right: 17
whilestmt (57)
    on left: 30, on right: 20
continuestmt (58)
    on left: 31, on right: 27
breakstmt (59)
    on left: 32, on right: 28
returnstmt (60)
    on left: 33, on right: 22
ifstmt (61)
    on left: 34 35, on right: 21
assignment (62)
    on left: 36 37 38 39, on right: 23 46
functioncall (63)
    on left: 40, on right: 24 38
passingargs (64)
    on left: 41 42, on right: 40
repeat_passingargs (65)
    on left: 43 44, on right: 41
declaration (66)
    on left: 45 46 47, on right: 25
io (67)
    on left: 48 49, on right: 26 39
ref (68)
    on left: 50 51, on right: 49 81
array (69)
    on left: 52, on right: 11 37 47 51
expression (70)
    on left: 53, on right: 29 30 33 34 35 36 37 41 43 52 79
assignexp (71)
    on left: 54 55, on right: 53 54
logicop (72)
    on left: 56 57, on right: 54
logicexp (73)
    on left: 58 59, on right: 54 55 58
eqop (74)
    on left: 60 61, on right: 58
equalityexp (75)
    on left: 62 63, on right: 58 59 62
relop (76)
    on left: 64 65 66 67, on right: 62
relationexp (77)
    on left: 68 69, on right: 62 63 68
addop (78)
    on left: 70 71, on right: 68
addexp (79)
    on left: 72 73, on right: 68 69 72
multop (80)
    on left: 74 75 76, on right: 72
multexp (81)
    on left: 77 78, on right: 72 73
term (82)
    on left: 79 80 81, on right: 77 78


State 0

    0 $accept: . prog_start $end

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 2 (prog_start)

    prog_start  go to state 6
    functions   go to state 7
    function    go to state 8
    type        go to state 9


State 1

   15 type: DOUBLE .

    $default  reduce using rule 15 (type)


State 2

   14 type: BOOLEAN .

    $default  reduce using rule 14 (type)


State 3

   16 type: CHAR .

    $default  reduce using rule 16 (type)


State 4

   12 type: VOID .

    $default  reduce using rule 12 (type)


State 5

   13 type: INTEGER .

    $default  reduce using rule 13 (type)


State 6

    0 $accept: prog_start . $end

    $end  shift, and go to state 10


State 7

    1 prog_start: functions .

    $default  reduce using rule 1 (prog_start)


State 8

    3 functions: function .
    4          | function . functions

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 3 (functions)

    functions  go to state 11
    function   go to state 8
    type       go to state 9


State 9

    5 function: type . FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    FUNCTION  shift, and go to state 12


State 10

    0 $accept: prog_start $end .

    $default  accept


State 11

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 12

    5 function: type FUNCTION . IDENTIFIER BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    IDENTIFIER  shift, and go to state 13


State 13

    5 function: type FUNCTION IDENTIFIER . BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 14


State 14

    5 function: type FUNCTION IDENTIFIER BEGINPARAM . arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 7 (arguements)

    arguements  go to state 15
    arguement   go to state 16
    type        go to state 17


State 15

    5 function: type FUNCTION IDENTIFIER BEGINPARAM arguements . ENDPARAM BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 18


State 16

    6 arguements: arguement . repeat_arguements

    COMMA  shift, and go to state 19

    $default  reduce using rule 9 (repeat_arguements)

    repeat_arguements  go to state 20


State 17

   10 arguement: type . IDENTIFIER
   11          | type . array

    IDENTIFIER  shift, and go to state 21

    array  go to state 22


State 18

    5 function: type FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 23


State 19

    8 repeat_arguements: COMMA . arguement repeat_arguements

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    arguement  go to state 24
    type       go to state 17


State 20

    6 arguements: arguement repeat_arguements .

    $default  reduce using rule 6 (arguements)


State 21

   10 arguement: type IDENTIFIER .
   52 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET

    BEGINBRACKET  shift, and go to state 25

    $default  reduce using rule 10 (arguement)


State 22

   11 arguement: type array .

    $default  reduce using rule 11 (arguement)


State 23

    5 function: type FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 26
    IF          shift, and go to state 27
    WHILE       shift, and go to state 28
    CONTINUE    shift, and go to state 29
    BREAK       shift, and go to state 30
    RETURN      shift, and go to state 31
    VOID        shift, and go to state 4
    NOT         shift, and go to state 32
    OUTPUT      shift, and go to state 33
    INPUT       shift, and go to state 34
    NUMBER      shift, and go to state 35
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 36

    $default  reduce using rule 19 (statements)

    type          go to state 37
    statements    go to state 38
    controlstmt   go to state 39
    statement     go to state 40
    whilestmt     go to state 41
    continuestmt  go to state 42
    breakstmt     go to state 43
    returnstmt    go to state 44
    ifstmt        go to state 45
    assignment    go to state 46
    functioncall  go to state 47
    declaration   go to state 48
    io            go to state 49
    ref           go to state 50
    array         go to state 51
    expression    go to state 52
    assignexp     go to state 53
    logicexp      go to state 54
    equalityexp   go to state 55
    relationexp   go to state 56
    addexp        go to state 57
    multexp       go to state 58
    term          go to state 59


State 24

    8 repeat_arguements: COMMA arguement . repeat_arguements

    COMMA  shift, and go to state 19

    $default  reduce using rule 9 (repeat_arguements)

    repeat_arguements  go to state 60


State 25

   52 array: IDENTIFIER BEGINBRACKET . expression ENDBRACKET

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    ref          go to state 50
    array        go to state 62
    expression   go to state 63
    assignexp    go to state 53
    logicexp     go to state 54
    equalityexp  go to state 55
    relationexp  go to state 56
    addexp       go to state 57
    multexp      go to state 58
    term         go to state 59


State 26

   79 term: BEGINPARAM . expression ENDPARAM

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    ref          go to state 50
    array        go to state 62
    expression   go to state 64
    assignexp    go to state 53
    logicexp     go to state 54
    equalityexp  go to state 55
    relationexp  go to state 56
    addexp       go to state 57
    multexp      go to state 58
    term         go to state 59


State 27

   34 ifstmt: IF . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 65


State 28

   30 whilestmt: WHILE . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 66


State 29

   31 continuestmt: CONTINUE .

    $default  reduce using rule 31 (continuestmt)


State 30

   32 breakstmt: BREAK .

    $default  reduce using rule 32 (breakstmt)


State 31

   33 returnstmt: RETURN . expression

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    ref          go to state 50
    array        go to state 62
    expression   go to state 67
    assignexp    go to state 53
    logicexp     go to state 54
    equalityexp  go to state 55
    relationexp  go to state 56
    addexp       go to state 57
    multexp      go to state 58
    term         go to state 59


State 32

   77 multexp: NOT . term

    BEGINPARAM  shift, and go to state 26
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    ref    go to state 50
    array  go to state 62
    term   go to state 68


State 33

   49 io: OUTPUT . BEGINPARAM ref ENDPARAM

    BEGINPARAM  shift, and go to state 69


State 34

   48 io: INPUT . BEGINPARAM ENDPARAM

    BEGINPARAM  shift, and go to state 70


State 35

   80 term: NUMBER .

    $default  reduce using rule 80 (term)


State 36

   36 assignment: IDENTIFIER . ASSIGN expression
   38           | IDENTIFIER . ASSIGN functioncall
   39           | IDENTIFIER . ASSIGN io
   40 functioncall: IDENTIFIER . BEGINPARAM passingargs ENDPARAM
   50 ref: IDENTIFIER .
   52 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET

    ASSIGN        shift, and go to state 71
    BEGINPARAM    shift, and go to state 72
    BEGINBRACKET  shift, and go to state 25

    $default  reduce using rule 50 (ref)


State 37

   45 declaration: type . IDENTIFIER
   46            | type . assignment
   47            | type . array

    IDENTIFIER  shift, and go to state 73

    assignment  go to state 74
    array       go to state 75


State 38

    5 function: type FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 76


State 39

   18 statements: controlstmt . statements

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 26
    IF          shift, and go to state 27
    WHILE       shift, and go to state 28
    CONTINUE    shift, and go to state 29
    BREAK       shift, and go to state 30
    RETURN      shift, and go to state 31
    VOID        shift, and go to state 4
    NOT         shift, and go to state 32
    OUTPUT      shift, and go to state 33
    INPUT       shift, and go to state 34
    NUMBER      shift, and go to state 35
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 36

    $default  reduce using rule 19 (statements)

    type          go to state 37
    statements    go to state 77
    controlstmt   go to state 39
    statement     go to state 40
    whilestmt     go to state 41
    continuestmt  go to state 42
    breakstmt     go to state 43
    returnstmt    go to state 44
    ifstmt        go to state 45
    assignment    go to state 46
    functioncall  go to state 47
    declaration   go to state 48
    io            go to state 49
    ref           go to state 50
    array         go to state 51
    expression    go to state 52
    assignexp     go to state 53
    logicexp      go to state 54
    equalityexp   go to state 55
    relationexp   go to state 56
    addexp        go to state 57
    multexp       go to state 58
    term          go to state 59


State 40

   17 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 78


State 41

   20 controlstmt: whilestmt .

    $default  reduce using rule 20 (controlstmt)


State 42

   27 statement: continuestmt .

    $default  reduce using rule 27 (statement)


State 43

   28 statement: breakstmt .

    $default  reduce using rule 28 (statement)


State 44

   22 statement: returnstmt .

    $default  reduce using rule 22 (statement)


State 45

   21 controlstmt: ifstmt .

    $default  reduce using rule 21 (controlstmt)


State 46

   23 statement: assignment .

    $default  reduce using rule 23 (statement)


State 47

   24 statement: functioncall .

    $default  reduce using rule 24 (statement)


State 48

   25 statement: declaration .

    $default  reduce using rule 25 (statement)


State 49

   26 statement: io .

    $default  reduce using rule 26 (statement)


State 50

   81 term: ref .

    $default  reduce using rule 81 (term)


State 51

   37 assignment: array . ASSIGN expression
   51 ref: array .

    ASSIGN  shift, and go to state 79

    $default  reduce using rule 51 (ref)


State 52

   29 statement: expression .

    $default  reduce using rule 29 (statement)


State 53

   53 expression: assignexp .

    $default  reduce using rule 53 (expression)


State 54

   54 assignexp: logicexp . logicop assignexp
   55          | logicexp .

    AND  shift, and go to state 80
    OR   shift, and go to state 81

    $default  reduce using rule 55 (assignexp)

    logicop  go to state 82


State 55

   58 logicexp: equalityexp . eqop logicexp
   59         | equalityexp .

    EQ  shift, and go to state 83
    NE  shift, and go to state 84

    $default  reduce using rule 59 (logicexp)

    eqop  go to state 85


State 56

   62 equalityexp: relationexp . relop equalityexp
   63            | relationexp .

    LT   shift, and go to state 86
    LTE  shift, and go to state 87
    GT   shift, and go to state 88
    GTE  shift, and go to state 89

    $default  reduce using rule 63 (equalityexp)

    relop  go to state 90


State 57

   68 relationexp: addexp . addop relationexp
   69            | addexp .

    ADD  shift, and go to state 91
    SUB  shift, and go to state 92

    $default  reduce using rule 69 (relationexp)

    addop  go to state 93


State 58

   72 addexp: multexp . multop addexp
   73       | multexp .

    DIV  shift, and go to state 94
    MUL  shift, and go to state 95
    MOD  shift, and go to state 96

    $default  reduce using rule 73 (addexp)

    multop  go to state 97


State 59

   78 multexp: term .

    $default  reduce using rule 78 (multexp)


State 60

    8 repeat_arguements: COMMA arguement repeat_arguements .

    $default  reduce using rule 8 (repeat_arguements)


State 61

   50 ref: IDENTIFIER .
   52 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET

    BEGINBRACKET  shift, and go to state 25

    $default  reduce using rule 50 (ref)


State 62

   51 ref: array .

    $default  reduce using rule 51 (ref)


State 63

   52 array: IDENTIFIER BEGINBRACKET expression . ENDBRACKET

    ENDBRACKET  shift, and go to state 98


State 64

   79 term: BEGINPARAM expression . ENDPARAM

    ENDPARAM  shift, and go to state 99


State 65

   34 ifstmt: IF BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    ref          go to state 50
    array        go to state 62
    expression   go to state 100
    assignexp    go to state 53
    logicexp     go to state 54
    equalityexp  go to state 55
    relationexp  go to state 56
    addexp       go to state 57
    multexp      go to state 58
    term         go to state 59


State 66

   30 whilestmt: WHILE BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    ref          go to state 50
    array        go to state 62
    expression   go to state 101
    assignexp    go to state 53
    logicexp     go to state 54
    equalityexp  go to state 55
    relationexp  go to state 56
    addexp       go to state 57
    multexp      go to state 58
    term         go to state 59


State 67

   33 returnstmt: RETURN expression .

    $default  reduce using rule 33 (returnstmt)


State 68

   77 multexp: NOT term .

    $default  reduce using rule 77 (multexp)


State 69

   49 io: OUTPUT BEGINPARAM . ref ENDPARAM

    IDENTIFIER  shift, and go to state 61

    ref    go to state 102
    array  go to state 62


State 70

   48 io: INPUT BEGINPARAM . ENDPARAM

    ENDPARAM  shift, and go to state 103


State 71

   36 assignment: IDENTIFIER ASSIGN . expression
   38           | IDENTIFIER ASSIGN . functioncall
   39           | IDENTIFIER ASSIGN . io

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    OUTPUT      shift, and go to state 33
    INPUT       shift, and go to state 34
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 104

    functioncall  go to state 105
    io            go to state 106
    ref           go to state 50
    array         go to state 62
    expression    go to state 107
    assignexp     go to state 53
    logicexp      go to state 54
    equalityexp   go to state 55
    relationexp   go to state 56
    addexp        go to state 57
    multexp       go to state 58
    term          go to state 59


State 72

   40 functioncall: IDENTIFIER BEGINPARAM . passingargs ENDPARAM

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    $default  reduce using rule 42 (passingargs)

    passingargs  go to state 108
    ref          go to state 50
    array        go to state 62
    expression   go to state 109
    assignexp    go to state 53
    logicexp     go to state 54
    equalityexp  go to state 55
    relationexp  go to state 56
    addexp       go to state 57
    multexp      go to state 58
    term         go to state 59


State 73

   36 assignment: IDENTIFIER . ASSIGN expression
   38           | IDENTIFIER . ASSIGN functioncall
   39           | IDENTIFIER . ASSIGN io
   45 declaration: type IDENTIFIER .
   52 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET

    ASSIGN        shift, and go to state 71
    BEGINBRACKET  shift, and go to state 25

    $default  reduce using rule 45 (declaration)


State 74

   46 declaration: type assignment .

    $default  reduce using rule 46 (declaration)


State 75

   37 assignment: array . ASSIGN expression
   47 declaration: type array .

    ASSIGN  shift, and go to state 79

    $default  reduce using rule 47 (declaration)


State 76

    5 function: type FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 5 (function)


State 77

   18 statements: controlstmt statements .

    $default  reduce using rule 18 (statements)


State 78

   17 statements: statement SEMICOLON . statements

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 26
    IF          shift, and go to state 27
    WHILE       shift, and go to state 28
    CONTINUE    shift, and go to state 29
    BREAK       shift, and go to state 30
    RETURN      shift, and go to state 31
    VOID        shift, and go to state 4
    NOT         shift, and go to state 32
    OUTPUT      shift, and go to state 33
    INPUT       shift, and go to state 34
    NUMBER      shift, and go to state 35
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 36

    $default  reduce using rule 19 (statements)

    type          go to state 37
    statements    go to state 110
    controlstmt   go to state 39
    statement     go to state 40
    whilestmt     go to state 41
    continuestmt  go to state 42
    breakstmt     go to state 43
    returnstmt    go to state 44
    ifstmt        go to state 45
    assignment    go to state 46
    functioncall  go to state 47
    declaration   go to state 48
    io            go to state 49
    ref           go to state 50
    array         go to state 51
    expression    go to state 52
    assignexp     go to state 53
    logicexp      go to state 54
    equalityexp   go to state 55
    relationexp   go to state 56
    addexp        go to state 57
    multexp       go to state 58
    term          go to state 59


State 79

   37 assignment: array ASSIGN . expression

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    ref          go to state 50
    array        go to state 62
    expression   go to state 111
    assignexp    go to state 53
    logicexp     go to state 54
    equalityexp  go to state 55
    relationexp  go to state 56
    addexp       go to state 57
    multexp      go to state 58
    term         go to state 59


State 80

   56 logicop: AND .

    $default  reduce using rule 56 (logicop)


State 81

   57 logicop: OR .

    $default  reduce using rule 57 (logicop)


State 82

   54 assignexp: logicexp logicop . assignexp

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    ref          go to state 50
    array        go to state 62
    assignexp    go to state 112
    logicexp     go to state 54
    equalityexp  go to state 55
    relationexp  go to state 56
    addexp       go to state 57
    multexp      go to state 58
    term         go to state 59


State 83

   60 eqop: EQ .

    $default  reduce using rule 60 (eqop)


State 84

   61 eqop: NE .

    $default  reduce using rule 61 (eqop)


State 85

   58 logicexp: equalityexp eqop . logicexp

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    ref          go to state 50
    array        go to state 62
    logicexp     go to state 113
    equalityexp  go to state 55
    relationexp  go to state 56
    addexp       go to state 57
    multexp      go to state 58
    term         go to state 59


State 86

   64 relop: LT .

    $default  reduce using rule 64 (relop)


State 87

   65 relop: LTE .

    $default  reduce using rule 65 (relop)


State 88

   66 relop: GT .

    $default  reduce using rule 66 (relop)


State 89

   67 relop: GTE .

    $default  reduce using rule 67 (relop)


State 90

   62 equalityexp: relationexp relop . equalityexp

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    ref          go to state 50
    array        go to state 62
    equalityexp  go to state 114
    relationexp  go to state 56
    addexp       go to state 57
    multexp      go to state 58
    term         go to state 59


State 91

   70 addop: ADD .

    $default  reduce using rule 70 (addop)


State 92

   71 addop: SUB .

    $default  reduce using rule 71 (addop)


State 93

   68 relationexp: addexp addop . relationexp

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    ref          go to state 50
    array        go to state 62
    relationexp  go to state 115
    addexp       go to state 57
    multexp      go to state 58
    term         go to state 59


State 94

   75 multop: DIV .

    $default  reduce using rule 75 (multop)


State 95

   74 multop: MUL .

    $default  reduce using rule 74 (multop)


State 96

   76 multop: MOD .

    $default  reduce using rule 76 (multop)


State 97

   72 addexp: multexp multop . addexp

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    ref      go to state 50
    array    go to state 62
    addexp   go to state 116
    multexp  go to state 58
    term     go to state 59


State 98

   52 array: IDENTIFIER BEGINBRACKET expression ENDBRACKET .

    $default  reduce using rule 52 (array)


State 99

   79 term: BEGINPARAM expression ENDPARAM .

    $default  reduce using rule 79 (term)


State 100

   34 ifstmt: IF BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 117


State 101

   30 whilestmt: WHILE BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 118


State 102

   49 io: OUTPUT BEGINPARAM ref . ENDPARAM

    ENDPARAM  shift, and go to state 119


State 103

   48 io: INPUT BEGINPARAM ENDPARAM .

    $default  reduce using rule 48 (io)


State 104

   40 functioncall: IDENTIFIER . BEGINPARAM passingargs ENDPARAM
   50 ref: IDENTIFIER .
   52 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET

    BEGINPARAM    shift, and go to state 72
    BEGINBRACKET  shift, and go to state 25

    $default  reduce using rule 50 (ref)


State 105

   38 assignment: IDENTIFIER ASSIGN functioncall .

    $default  reduce using rule 38 (assignment)


State 106

   39 assignment: IDENTIFIER ASSIGN io .

    $default  reduce using rule 39 (assignment)


State 107

   36 assignment: IDENTIFIER ASSIGN expression .

    $default  reduce using rule 36 (assignment)


State 108

   40 functioncall: IDENTIFIER BEGINPARAM passingargs . ENDPARAM

    ENDPARAM  shift, and go to state 120


State 109

   41 passingargs: expression . repeat_passingargs

    COMMA  shift, and go to state 121

    $default  reduce using rule 44 (repeat_passingargs)

    repeat_passingargs  go to state 122


State 110

   17 statements: statement SEMICOLON statements .

    $default  reduce using rule 17 (statements)


State 111

   37 assignment: array ASSIGN expression .

    $default  reduce using rule 37 (assignment)


State 112

   54 assignexp: logicexp logicop assignexp .

    $default  reduce using rule 54 (assignexp)


State 113

   58 logicexp: equalityexp eqop logicexp .

    $default  reduce using rule 58 (logicexp)


State 114

   62 equalityexp: relationexp relop equalityexp .

    $default  reduce using rule 62 (equalityexp)


State 115

   68 relationexp: addexp addop relationexp .

    $default  reduce using rule 68 (relationexp)


State 116

   72 addexp: multexp multop addexp .

    $default  reduce using rule 72 (addexp)


State 117

   34 ifstmt: IF BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 123


State 118

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 124


State 119

   49 io: OUTPUT BEGINPARAM ref ENDPARAM .

    $default  reduce using rule 49 (io)


State 120

   40 functioncall: IDENTIFIER BEGINPARAM passingargs ENDPARAM .

    $default  reduce using rule 40 (functioncall)


State 121

   43 repeat_passingargs: COMMA . expression repeat_arguements

    BEGINPARAM  shift, and go to state 26
    NOT         shift, and go to state 32
    NUMBER      shift, and go to state 35
    IDENTIFIER  shift, and go to state 61

    ref          go to state 50
    array        go to state 62
    expression   go to state 125
    assignexp    go to state 53
    logicexp     go to state 54
    equalityexp  go to state 55
    relationexp  go to state 56
    addexp       go to state 57
    multexp      go to state 58
    term         go to state 59


State 122

   41 passingargs: expression repeat_passingargs .

    $default  reduce using rule 41 (passingargs)


State 123

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 26
    IF          shift, and go to state 27
    WHILE       shift, and go to state 28
    CONTINUE    shift, and go to state 29
    BREAK       shift, and go to state 30
    RETURN      shift, and go to state 31
    VOID        shift, and go to state 4
    NOT         shift, and go to state 32
    OUTPUT      shift, and go to state 33
    INPUT       shift, and go to state 34
    NUMBER      shift, and go to state 35
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 36

    $default  reduce using rule 19 (statements)

    type          go to state 37
    statements    go to state 126
    controlstmt   go to state 39
    statement     go to state 40
    whilestmt     go to state 41
    continuestmt  go to state 42
    breakstmt     go to state 43
    returnstmt    go to state 44
    ifstmt        go to state 45
    assignment    go to state 46
    functioncall  go to state 47
    declaration   go to state 48
    io            go to state 49
    ref           go to state 50
    array         go to state 51
    expression    go to state 52
    assignexp     go to state 53
    logicexp      go to state 54
    equalityexp   go to state 55
    relationexp   go to state 56
    addexp        go to state 57
    multexp       go to state 58
    term          go to state 59


State 124

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 26
    IF          shift, and go to state 27
    WHILE       shift, and go to state 28
    CONTINUE    shift, and go to state 29
    BREAK       shift, and go to state 30
    RETURN      shift, and go to state 31
    VOID        shift, and go to state 4
    NOT         shift, and go to state 32
    OUTPUT      shift, and go to state 33
    INPUT       shift, and go to state 34
    NUMBER      shift, and go to state 35
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 36

    $default  reduce using rule 19 (statements)

    type          go to state 37
    statements    go to state 127
    controlstmt   go to state 39
    statement     go to state 40
    whilestmt     go to state 41
    continuestmt  go to state 42
    breakstmt     go to state 43
    returnstmt    go to state 44
    ifstmt        go to state 45
    assignment    go to state 46
    functioncall  go to state 47
    declaration   go to state 48
    io            go to state 49
    ref           go to state 50
    array         go to state 51
    expression    go to state 52
    assignexp     go to state 53
    logicexp      go to state 54
    equalityexp   go to state 55
    relationexp   go to state 56
    addexp        go to state 57
    multexp       go to state 58
    term          go to state 59


State 125

   43 repeat_passingargs: COMMA expression . repeat_arguements

    COMMA  shift, and go to state 19

    $default  reduce using rule 9 (repeat_arguements)

    repeat_arguements  go to state 128


State 126

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    ENDSCOPE  shift, and go to state 129


State 127

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 130


State 128

   43 repeat_passingargs: COMMA expression repeat_arguements .

    $default  reduce using rule 43 (repeat_passingargs)


State 129

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE .
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE . ELSE BEGINSCOPE statements ENDSCOPE

    ELSE  shift, and go to state 131

    $default  reduce using rule 34 (ifstmt)


State 130

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 30 (whilestmt)


State 131

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 132


State 132

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 26
    IF          shift, and go to state 27
    WHILE       shift, and go to state 28
    CONTINUE    shift, and go to state 29
    BREAK       shift, and go to state 30
    RETURN      shift, and go to state 31
    VOID        shift, and go to state 4
    NOT         shift, and go to state 32
    OUTPUT      shift, and go to state 33
    INPUT       shift, and go to state 34
    NUMBER      shift, and go to state 35
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 36

    $default  reduce using rule 19 (statements)

    type          go to state 37
    statements    go to state 133
    controlstmt   go to state 39
    statement     go to state 40
    whilestmt     go to state 41
    continuestmt  go to state 42
    breakstmt     go to state 43
    returnstmt    go to state 44
    ifstmt        go to state 45
    assignment    go to state 46
    functioncall  go to state 47
    declaration   go to state 48
    io            go to state 49
    ref           go to state 50
    array         go to state 51
    expression    go to state 52
    assignexp     go to state 53
    logicexp      go to state 54
    equalityexp   go to state 55
    relationexp   go to state 56
    addexp        go to state 57
    multexp       go to state 58
    term          go to state 59


State 133

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 134


State 134

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 35 (ifstmt)
