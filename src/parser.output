Terminals unused in grammar

   FOR
   TRUE
   FALSE
   DECIMAL


Grammar

    0 $accept: prog_start $end

    1 prog_start: functions
    2           | %empty

    3 functions: function
    4          | function functions

    5 func_ident: FUNCTION IDENTIFIER

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    7 arguements: arguement repeat_arguements
    8           | %empty

    9 repeat_arguements: COMMA arguement repeat_arguements
   10                  | %empty

   11 arguement: type IDENTIFIER

   12 type: VOID
   13     | INTEGER
   14     | BOOLEAN
   15     | DOUBLE
   16     | CHAR

   17 statements: statement SEMICOLON statements
   18           | controlstmt statements
   19           | %empty

   20 controlstmt: whilestmt
   21            | ifstmt
   22            | continuestmt
   23            | breakstmt

   24 statement: returnstmt
   25          | declaration
   26          | output
   27          | continuestmt
   28          | breakstmt
   29          | expression

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE

   31 continuestmt: CONTINUE SEMICOLON

   32 breakstmt: BREAK SEMICOLON

   33 returnstmt: RETURN expression

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

   36 functioncall: IDENTIFIER BEGINPARAM passingargs ENDPARAM

   37 passingargs: expression repeat_passingargs
   38            | %empty

   39 repeat_passingargs: COMMA expression repeat_arguements
   40                   | %empty

   41 declaration: type IDENTIFIER
   42            | type array_declaration

   43 input: INPUT BEGINPARAM ENDPARAM

   44 output: OUTPUT BEGINPARAM expression ENDPARAM

   45 array_declaration: IDENTIFIER BEGINBRACKET NUMBER ENDBRACKET

   46 expression: assignexp
   47           | assignexp ASSIGN expression
   48           | IDENTIFIER BEGINBRACKET expression ENDBRACKET ASSIGN expression

   49 assignexp: logicexp logicop assignexp
   50          | logicexp

   51 logicop: AND
   52        | OR

   53 logicexp: equalityexp eqop logicexp
   54         | equalityexp

   55 eqop: EQ
   56     | NE

   57 equalityexp: relationexp relop equalityexp
   58            | relationexp

   59 relop: LT
   60      | LTE
   61      | GT
   62      | GTE

   63 relationexp: addexp addop relationexp
   64            | addexp

   65 addop: ADD
   66      | SUB

   67 addexp: multexp multop addexp
   68       | multexp

   69 multop: MUL
   70       | DIV
   71       | MOD

   72 multexp: NOT term
   73        | term

   74 term: BEGINPARAM expression ENDPARAM
   75     | NUMBER
   76     | IDENTIFIER
   77     | IDENTIFIER BEGINBRACKET BEGINBRACKET expression ENDBRACKET ENDBRACKET
   78     | functioncall
   79     | input


Terminals, with rules where they appear

$end (0) 0
error (256)
DOUBLE (258) 15
BOOLEAN (259) 14
CHAR (260) 16
ASSIGN (261) 47 48
ADD (262) 65
SUB (263) 66
DIV (264) 70
MUL (265) 69
MOD (266) 71
EQ (267) 55
LT (268) 59
LTE (269) 60
GT (270) 61
GTE (271) 62
NE (272) 56
FUNCTION (273) 5
BEGINSCOPE (274) 6 30 34 35
ENDSCOPE (275) 6 30 34 35
BEGINPARAM (276) 6 30 34 35 36 43 44 74
ENDPARAM (277) 6 30 34 35 36 43 44 74
BEGINBRACKET (278) 45 48 77
ENDBRACKET (279) 45 48 77
IF (280) 34 35
ELSE (281) 35
FOR (282)
WHILE (283) 30
CONTINUE (284) 31
BREAK (285) 32
TRUE (286)
FALSE (287)
RETURN (288) 33
VOID (289) 12
NOT (290) 72
AND (291) 51
OR (292) 52
SEMICOLON (293) 17 31 32
COMMA (294) 9 39
OUTPUT (295) 44
INPUT (296) 43
NUMBER (297) 45 75
DECIMAL (298)
INTEGER (299) 13
IDENTIFIER (300) 5 11 36 41 45 48 76 77


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
prog_start (47)
    on left: 1 2, on right: 0
functions (48)
    on left: 3 4, on right: 1 4
func_ident (49)
    on left: 5, on right: 6
function (50)
    on left: 6, on right: 3 4
arguements (51)
    on left: 7 8, on right: 6
repeat_arguements (52)
    on left: 9 10, on right: 7 9 39
arguement (53)
    on left: 11, on right: 7 9
type (54)
    on left: 12 13 14 15 16, on right: 6 11 41 42
statements (55)
    on left: 17 18 19, on right: 6 17 18 30 34 35
controlstmt (56)
    on left: 20 21 22 23, on right: 18
statement (57)
    on left: 24 25 26 27 28 29, on right: 17
whilestmt (58)
    on left: 30, on right: 20
continuestmt (59)
    on left: 31, on right: 22 27
breakstmt (60)
    on left: 32, on right: 23 28
returnstmt (61)
    on left: 33, on right: 24
ifstmt (62)
    on left: 34 35, on right: 21
functioncall (63)
    on left: 36, on right: 78
passingargs (64)
    on left: 37 38, on right: 36
repeat_passingargs (65)
    on left: 39 40, on right: 37
declaration (66)
    on left: 41 42, on right: 25
input (67)
    on left: 43, on right: 79
output (68)
    on left: 44, on right: 26
array_declaration (69)
    on left: 45, on right: 42
expression (70)
    on left: 46 47 48, on right: 29 30 33 34 35 37 39 44 47 48 74 77
assignexp (71)
    on left: 49 50, on right: 46 47 49
logicop (72)
    on left: 51 52, on right: 49
logicexp (73)
    on left: 53 54, on right: 49 50 53
eqop (74)
    on left: 55 56, on right: 53
equalityexp (75)
    on left: 57 58, on right: 53 54 57
relop (76)
    on left: 59 60 61 62, on right: 57
relationexp (77)
    on left: 63 64, on right: 57 58 63
addop (78)
    on left: 65 66, on right: 63
addexp (79)
    on left: 67 68, on right: 63 64 67
multop (80)
    on left: 69 70 71, on right: 67
multexp (81)
    on left: 72 73, on right: 67 68
term (82)
    on left: 74 75 76 77 78 79, on right: 72 73


State 0

    0 $accept: . prog_start $end

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 2 (prog_start)

    prog_start  go to state 6
    functions   go to state 7
    function    go to state 8
    type        go to state 9


State 1

   15 type: DOUBLE .

    $default  reduce using rule 15 (type)


State 2

   14 type: BOOLEAN .

    $default  reduce using rule 14 (type)


State 3

   16 type: CHAR .

    $default  reduce using rule 16 (type)


State 4

   12 type: VOID .

    $default  reduce using rule 12 (type)


State 5

   13 type: INTEGER .

    $default  reduce using rule 13 (type)


State 6

    0 $accept: prog_start . $end

    $end  shift, and go to state 10


State 7

    1 prog_start: functions .

    $default  reduce using rule 1 (prog_start)


State 8

    3 functions: function .
    4          | function . functions

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 3 (functions)

    functions  go to state 11
    function   go to state 8
    type       go to state 9


State 9

    6 function: type . func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    FUNCTION  shift, and go to state 12

    func_ident  go to state 13


State 10

    0 $accept: prog_start $end .

    $default  accept


State 11

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 12

    5 func_ident: FUNCTION . IDENTIFIER

    IDENTIFIER  shift, and go to state 14


State 13

    6 function: type func_ident . BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 15


State 14

    5 func_ident: FUNCTION IDENTIFIER .

    $default  reduce using rule 5 (func_ident)


State 15

    6 function: type func_ident BEGINPARAM . arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 8 (arguements)

    arguements  go to state 16
    arguement   go to state 17
    type        go to state 18


State 16

    6 function: type func_ident BEGINPARAM arguements . ENDPARAM BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 19


State 17

    7 arguements: arguement . repeat_arguements

    COMMA  shift, and go to state 20

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 21


State 18

   11 arguement: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 22


State 19

    6 function: type func_ident BEGINPARAM arguements ENDPARAM . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 23


State 20

    9 repeat_arguements: COMMA . arguement repeat_arguements

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    arguement  go to state 24
    type       go to state 18


State 21

    7 arguements: arguement repeat_arguements .

    $default  reduce using rule 7 (arguements)


State 22

   11 arguement: type IDENTIFIER .

    $default  reduce using rule 11 (arguement)


State 23

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 19 (statements)

    type          go to state 36
    statements    go to state 37
    controlstmt   go to state 38
    statement     go to state 39
    whilestmt     go to state 40
    continuestmt  go to state 41
    breakstmt     go to state 42
    returnstmt    go to state 43
    ifstmt        go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    input         go to state 47
    output        go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 24

    9 repeat_arguements: COMMA arguement . repeat_arguements

    COMMA  shift, and go to state 20

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 57


State 25

   74 term: BEGINPARAM . expression ENDPARAM

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 58
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 26

   34 ifstmt: IF . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 59


State 27

   30 whilestmt: WHILE . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 60


State 28

   31 continuestmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 61


State 29

   32 breakstmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 62


State 30

   33 returnstmt: RETURN . expression

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 63
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 31

   72 multexp: NOT . term

    BEGINPARAM  shift, and go to state 25
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 64

    functioncall  go to state 45
    input         go to state 47
    term          go to state 65


State 32

   44 output: OUTPUT . BEGINPARAM expression ENDPARAM

    BEGINPARAM  shift, and go to state 66


State 33

   43 input: INPUT . BEGINPARAM ENDPARAM

    BEGINPARAM  shift, and go to state 67


State 34

   75 term: NUMBER .

    $default  reduce using rule 75 (term)


State 35

   36 functioncall: IDENTIFIER . BEGINPARAM passingargs ENDPARAM
   48 expression: IDENTIFIER . BEGINBRACKET expression ENDBRACKET ASSIGN expression
   76 term: IDENTIFIER .
   77     | IDENTIFIER . BEGINBRACKET BEGINBRACKET expression ENDBRACKET ENDBRACKET

    BEGINPARAM    shift, and go to state 68
    BEGINBRACKET  shift, and go to state 69

    $default  reduce using rule 76 (term)


State 36

   41 declaration: type . IDENTIFIER
   42            | type . array_declaration

    IDENTIFIER  shift, and go to state 70

    array_declaration  go to state 71


State 37

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 72


State 38

   18 statements: controlstmt . statements

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 19 (statements)

    type          go to state 36
    statements    go to state 73
    controlstmt   go to state 38
    statement     go to state 39
    whilestmt     go to state 40
    continuestmt  go to state 41
    breakstmt     go to state 42
    returnstmt    go to state 43
    ifstmt        go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    input         go to state 47
    output        go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 39

   17 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 74


State 40

   20 controlstmt: whilestmt .

    $default  reduce using rule 20 (controlstmt)


State 41

   22 controlstmt: continuestmt .
   27 statement: continuestmt .

    SEMICOLON  reduce using rule 27 (statement)
    $default   reduce using rule 22 (controlstmt)


State 42

   23 controlstmt: breakstmt .
   28 statement: breakstmt .

    SEMICOLON  reduce using rule 28 (statement)
    $default   reduce using rule 23 (controlstmt)


State 43

   24 statement: returnstmt .

    $default  reduce using rule 24 (statement)


State 44

   21 controlstmt: ifstmt .

    $default  reduce using rule 21 (controlstmt)


State 45

   78 term: functioncall .

    $default  reduce using rule 78 (term)


State 46

   25 statement: declaration .

    $default  reduce using rule 25 (statement)


State 47

   79 term: input .

    $default  reduce using rule 79 (term)


State 48

   26 statement: output .

    $default  reduce using rule 26 (statement)


State 49

   29 statement: expression .

    $default  reduce using rule 29 (statement)


State 50

   46 expression: assignexp .
   47           | assignexp . ASSIGN expression

    ASSIGN  shift, and go to state 75

    $default  reduce using rule 46 (expression)


State 51

   49 assignexp: logicexp . logicop assignexp
   50          | logicexp .

    AND  shift, and go to state 76
    OR   shift, and go to state 77

    $default  reduce using rule 50 (assignexp)

    logicop  go to state 78


State 52

   53 logicexp: equalityexp . eqop logicexp
   54         | equalityexp .

    EQ  shift, and go to state 79
    NE  shift, and go to state 80

    $default  reduce using rule 54 (logicexp)

    eqop  go to state 81


State 53

   57 equalityexp: relationexp . relop equalityexp
   58            | relationexp .

    LT   shift, and go to state 82
    LTE  shift, and go to state 83
    GT   shift, and go to state 84
    GTE  shift, and go to state 85

    $default  reduce using rule 58 (equalityexp)

    relop  go to state 86


State 54

   63 relationexp: addexp . addop relationexp
   64            | addexp .

    ADD  shift, and go to state 87
    SUB  shift, and go to state 88

    $default  reduce using rule 64 (relationexp)

    addop  go to state 89


State 55

   67 addexp: multexp . multop addexp
   68       | multexp .

    DIV  shift, and go to state 90
    MUL  shift, and go to state 91
    MOD  shift, and go to state 92

    $default  reduce using rule 68 (addexp)

    multop  go to state 93


State 56

   73 multexp: term .

    $default  reduce using rule 73 (multexp)


State 57

    9 repeat_arguements: COMMA arguement repeat_arguements .

    $default  reduce using rule 9 (repeat_arguements)


State 58

   74 term: BEGINPARAM expression . ENDPARAM

    ENDPARAM  shift, and go to state 94


State 59

   34 ifstmt: IF BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 95
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 60

   30 whilestmt: WHILE BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 96
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 61

   31 continuestmt: CONTINUE SEMICOLON .

    $default  reduce using rule 31 (continuestmt)


State 62

   32 breakstmt: BREAK SEMICOLON .

    $default  reduce using rule 32 (breakstmt)


State 63

   33 returnstmt: RETURN expression .

    $default  reduce using rule 33 (returnstmt)


State 64

   36 functioncall: IDENTIFIER . BEGINPARAM passingargs ENDPARAM
   76 term: IDENTIFIER .
   77     | IDENTIFIER . BEGINBRACKET BEGINBRACKET expression ENDBRACKET ENDBRACKET

    BEGINPARAM    shift, and go to state 68
    BEGINBRACKET  shift, and go to state 97

    $default  reduce using rule 76 (term)


State 65

   72 multexp: NOT term .

    $default  reduce using rule 72 (multexp)


State 66

   44 output: OUTPUT BEGINPARAM . expression ENDPARAM

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 98
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 67

   43 input: INPUT BEGINPARAM . ENDPARAM

    ENDPARAM  shift, and go to state 99


State 68

   36 functioncall: IDENTIFIER BEGINPARAM . passingargs ENDPARAM

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 38 (passingargs)

    functioncall  go to state 45
    passingargs   go to state 100
    input         go to state 47
    expression    go to state 101
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 69

   48 expression: IDENTIFIER BEGINBRACKET . expression ENDBRACKET ASSIGN expression
   77 term: IDENTIFIER BEGINBRACKET . BEGINBRACKET expression ENDBRACKET ENDBRACKET

    BEGINPARAM    shift, and go to state 25
    BEGINBRACKET  shift, and go to state 102
    NOT           shift, and go to state 31
    INPUT         shift, and go to state 33
    NUMBER        shift, and go to state 34
    IDENTIFIER    shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 103
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 70

   41 declaration: type IDENTIFIER .
   45 array_declaration: IDENTIFIER . BEGINBRACKET NUMBER ENDBRACKET

    BEGINBRACKET  shift, and go to state 104

    $default  reduce using rule 41 (declaration)


State 71

   42 declaration: type array_declaration .

    $default  reduce using rule 42 (declaration)


State 72

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 6 (function)


State 73

   18 statements: controlstmt statements .

    $default  reduce using rule 18 (statements)


State 74

   17 statements: statement SEMICOLON . statements

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 19 (statements)

    type          go to state 36
    statements    go to state 105
    controlstmt   go to state 38
    statement     go to state 39
    whilestmt     go to state 40
    continuestmt  go to state 41
    breakstmt     go to state 42
    returnstmt    go to state 43
    ifstmt        go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    input         go to state 47
    output        go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 75

   47 expression: assignexp ASSIGN . expression

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 106
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 76

   51 logicop: AND .

    $default  reduce using rule 51 (logicop)


State 77

   52 logicop: OR .

    $default  reduce using rule 52 (logicop)


State 78

   49 assignexp: logicexp logicop . assignexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 64

    functioncall  go to state 45
    input         go to state 47
    assignexp     go to state 107
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 79

   55 eqop: EQ .

    $default  reduce using rule 55 (eqop)


State 80

   56 eqop: NE .

    $default  reduce using rule 56 (eqop)


State 81

   53 logicexp: equalityexp eqop . logicexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 64

    functioncall  go to state 45
    input         go to state 47
    logicexp      go to state 108
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 82

   59 relop: LT .

    $default  reduce using rule 59 (relop)


State 83

   60 relop: LTE .

    $default  reduce using rule 60 (relop)


State 84

   61 relop: GT .

    $default  reduce using rule 61 (relop)


State 85

   62 relop: GTE .

    $default  reduce using rule 62 (relop)


State 86

   57 equalityexp: relationexp relop . equalityexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 64

    functioncall  go to state 45
    input         go to state 47
    equalityexp   go to state 109
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 87

   65 addop: ADD .

    $default  reduce using rule 65 (addop)


State 88

   66 addop: SUB .

    $default  reduce using rule 66 (addop)


State 89

   63 relationexp: addexp addop . relationexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 64

    functioncall  go to state 45
    input         go to state 47
    relationexp   go to state 110
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 90

   70 multop: DIV .

    $default  reduce using rule 70 (multop)


State 91

   69 multop: MUL .

    $default  reduce using rule 69 (multop)


State 92

   71 multop: MOD .

    $default  reduce using rule 71 (multop)


State 93

   67 addexp: multexp multop . addexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 64

    functioncall  go to state 45
    input         go to state 47
    addexp        go to state 111
    multexp       go to state 55
    term          go to state 56


State 94

   74 term: BEGINPARAM expression ENDPARAM .

    $default  reduce using rule 74 (term)


State 95

   34 ifstmt: IF BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 112


State 96

   30 whilestmt: WHILE BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 113


State 97

   77 term: IDENTIFIER BEGINBRACKET . BEGINBRACKET expression ENDBRACKET ENDBRACKET

    BEGINBRACKET  shift, and go to state 102


State 98

   44 output: OUTPUT BEGINPARAM expression . ENDPARAM

    ENDPARAM  shift, and go to state 114


State 99

   43 input: INPUT BEGINPARAM ENDPARAM .

    $default  reduce using rule 43 (input)


State 100

   36 functioncall: IDENTIFIER BEGINPARAM passingargs . ENDPARAM

    ENDPARAM  shift, and go to state 115


State 101

   37 passingargs: expression . repeat_passingargs

    COMMA  shift, and go to state 116

    $default  reduce using rule 40 (repeat_passingargs)

    repeat_passingargs  go to state 117


State 102

   77 term: IDENTIFIER BEGINBRACKET BEGINBRACKET . expression ENDBRACKET ENDBRACKET

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 118
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 103

   48 expression: IDENTIFIER BEGINBRACKET expression . ENDBRACKET ASSIGN expression

    ENDBRACKET  shift, and go to state 119


State 104

   45 array_declaration: IDENTIFIER BEGINBRACKET . NUMBER ENDBRACKET

    NUMBER  shift, and go to state 120


State 105

   17 statements: statement SEMICOLON statements .

    $default  reduce using rule 17 (statements)


State 106

   47 expression: assignexp ASSIGN expression .

    $default  reduce using rule 47 (expression)


State 107

   49 assignexp: logicexp logicop assignexp .

    $default  reduce using rule 49 (assignexp)


State 108

   53 logicexp: equalityexp eqop logicexp .

    $default  reduce using rule 53 (logicexp)


State 109

   57 equalityexp: relationexp relop equalityexp .

    $default  reduce using rule 57 (equalityexp)


State 110

   63 relationexp: addexp addop relationexp .

    $default  reduce using rule 63 (relationexp)


State 111

   67 addexp: multexp multop addexp .

    $default  reduce using rule 67 (addexp)


State 112

   34 ifstmt: IF BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 121


State 113

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 122


State 114

   44 output: OUTPUT BEGINPARAM expression ENDPARAM .

    $default  reduce using rule 44 (output)


State 115

   36 functioncall: IDENTIFIER BEGINPARAM passingargs ENDPARAM .

    $default  reduce using rule 36 (functioncall)


State 116

   39 repeat_passingargs: COMMA . expression repeat_arguements

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 123
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 117

   37 passingargs: expression repeat_passingargs .

    $default  reduce using rule 37 (passingargs)


State 118

   77 term: IDENTIFIER BEGINBRACKET BEGINBRACKET expression . ENDBRACKET ENDBRACKET

    ENDBRACKET  shift, and go to state 124


State 119

   48 expression: IDENTIFIER BEGINBRACKET expression ENDBRACKET . ASSIGN expression

    ASSIGN  shift, and go to state 125


State 120

   45 array_declaration: IDENTIFIER BEGINBRACKET NUMBER . ENDBRACKET

    ENDBRACKET  shift, and go to state 126


State 121

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 19 (statements)

    type          go to state 36
    statements    go to state 127
    controlstmt   go to state 38
    statement     go to state 39
    whilestmt     go to state 40
    continuestmt  go to state 41
    breakstmt     go to state 42
    returnstmt    go to state 43
    ifstmt        go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    input         go to state 47
    output        go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 122

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 19 (statements)

    type          go to state 36
    statements    go to state 128
    controlstmt   go to state 38
    statement     go to state 39
    whilestmt     go to state 40
    continuestmt  go to state 41
    breakstmt     go to state 42
    returnstmt    go to state 43
    ifstmt        go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    input         go to state 47
    output        go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 123

   39 repeat_passingargs: COMMA expression . repeat_arguements

    COMMA  shift, and go to state 20

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 129


State 124

   77 term: IDENTIFIER BEGINBRACKET BEGINBRACKET expression ENDBRACKET . ENDBRACKET

    ENDBRACKET  shift, and go to state 130


State 125

   48 expression: IDENTIFIER BEGINBRACKET expression ENDBRACKET ASSIGN . expression

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    IDENTIFIER  shift, and go to state 35

    functioncall  go to state 45
    input         go to state 47
    expression    go to state 131
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 126

   45 array_declaration: IDENTIFIER BEGINBRACKET NUMBER ENDBRACKET .

    $default  reduce using rule 45 (array_declaration)


State 127

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    ENDSCOPE  shift, and go to state 132


State 128

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 133


State 129

   39 repeat_passingargs: COMMA expression repeat_arguements .

    $default  reduce using rule 39 (repeat_passingargs)


State 130

   77 term: IDENTIFIER BEGINBRACKET BEGINBRACKET expression ENDBRACKET ENDBRACKET .

    $default  reduce using rule 77 (term)


State 131

   48 expression: IDENTIFIER BEGINBRACKET expression ENDBRACKET ASSIGN expression .

    $default  reduce using rule 48 (expression)


State 132

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE .
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE . ELSE BEGINSCOPE statements ENDSCOPE

    ELSE  shift, and go to state 134

    $default  reduce using rule 34 (ifstmt)


State 133

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 30 (whilestmt)


State 134

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 135


State 135

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    INPUT       shift, and go to state 33
    NUMBER      shift, and go to state 34
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 35

    $default  reduce using rule 19 (statements)

    type          go to state 36
    statements    go to state 136
    controlstmt   go to state 38
    statement     go to state 39
    whilestmt     go to state 40
    continuestmt  go to state 41
    breakstmt     go to state 42
    returnstmt    go to state 43
    ifstmt        go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    input         go to state 47
    output        go to state 48
    expression    go to state 49
    assignexp     go to state 50
    logicexp      go to state 51
    equalityexp   go to state 52
    relationexp   go to state 53
    addexp        go to state 54
    multexp       go to state 55
    term          go to state 56


State 136

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 137


State 137

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 35 (ifstmt)
