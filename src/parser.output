Terminals unused in grammar

   FOR
   TRUE
   FALSE
   DECIMAL


Grammar

    0 $accept: prog_start $end

    1 prog_start: functions
    2           | %empty

    3 functions: function
    4          | function functions

    5 func_ident: FUNCTION IDENTIFIER

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    7 arguements: arguement repeat_arguements
    8           | %empty

    9 repeat_arguements: COMMA arguement repeat_arguements
   10                  | %empty

   11 arguement: type IDENTIFIER

   12 type: VOID
   13     | INTEGER
   14     | BOOLEAN
   15     | DOUBLE
   16     | CHAR

   17 statements: statement SEMICOLON statements
   18           | controlstmt statements
   19           | %empty

   20 controlstmt: whilestmt
   21            | ifstmt

   22 statement: returnstmt
   23          | assignment
   24          | functioncall
   25          | declaration
   26          | output
   27          | continuestmt
   28          | breakstmt
   29          | expression

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE

   31 continuestmt: CONTINUE

   32 breakstmt: BREAK

   33 returnstmt: RETURN expression

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

   36 assignment: IDENTIFIER BEGINBRACKET expression ENDBRACKET ASSIGN expression
   37           | IDENTIFIER BEGINBRACKET expression ENDBRACKET ASSIGN input
   38           | IDENTIFIER ASSIGN IDENTIFIER BEGINBRACKET expression ENDBRACKET
   39           | IDENTIFIER ASSIGN expression
   40           | IDENTIFIER ASSIGN functioncall
   41           | IDENTIFIER ASSIGN input

   42 functioncall: IDENTIFIER BEGINPARAM passingargs ENDPARAM

   43 passingargs: expression repeat_passingargs
   44            | %empty

   45 repeat_passingargs: COMMA expression repeat_arguements
   46                   | %empty

   47 declaration: type IDENTIFIER
   48            | type assignment
   49            | type array_declaration

   50 input: INPUT BEGINPARAM ENDPARAM

   51 output: OUTPUT BEGINPARAM expression ENDPARAM
   52       | OUTPUT BEGINPARAM IDENTIFIER BEGINBRACKET expression ENDBRACKET ENDPARAM

   53 array_declaration: IDENTIFIER BEGINBRACKET expression ENDBRACKET

   54 expression: assignexp

   55 assignexp: logicexp logicop assignexp
   56          | logicexp

   57 logicop: AND
   58        | OR

   59 logicexp: equalityexp eqop logicexp
   60         | equalityexp

   61 eqop: EQ
   62     | NE

   63 equalityexp: relationexp relop equalityexp
   64            | relationexp

   65 relop: LT
   66      | LTE
   67      | GT
   68      | GTE

   69 relationexp: addexp addop relationexp
   70            | addexp

   71 addop: ADD
   72      | SUB

   73 addexp: multexp multop addexp
   74       | multexp

   75 multop: MUL
   76       | DIV
   77       | MOD

   78 multexp: NOT term
   79        | term

   80 term: BEGINPARAM expression ENDPARAM
   81     | NUMBER
   82     | IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256)
DOUBLE (258) 15
BOOLEAN (259) 14
CHAR (260) 16
ASSIGN (261) 36 37 38 39 40 41
ADD (262) 71
SUB (263) 72
DIV (264) 76
MUL (265) 75
MOD (266) 77
EQ (267) 61
LT (268) 65
LTE (269) 66
GT (270) 67
GTE (271) 68
NE (272) 62
FUNCTION (273) 5
BEGINSCOPE (274) 6 30 34 35
ENDSCOPE (275) 6 30 34 35
BEGINPARAM (276) 6 30 34 35 42 50 51 52 80
ENDPARAM (277) 6 30 34 35 42 50 51 52 80
BEGINBRACKET (278) 36 37 38 52 53
ENDBRACKET (279) 36 37 38 52 53
IF (280) 34 35
ELSE (281) 35
FOR (282)
WHILE (283) 30
CONTINUE (284) 31
BREAK (285) 32
TRUE (286)
FALSE (287)
RETURN (288) 33
VOID (289) 12
NOT (290) 78
AND (291) 57
OR (292) 58
SEMICOLON (293) 17
COMMA (294) 9 45
OUTPUT (295) 51 52
INPUT (296) 50
NUMBER (297) 81
DECIMAL (298)
INTEGER (299) 13
IDENTIFIER (300) 5 11 36 37 38 39 40 41 42 47 52 53 82


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
prog_start (47)
    on left: 1 2, on right: 0
functions (48)
    on left: 3 4, on right: 1 4
func_ident (49)
    on left: 5, on right: 6
function (50)
    on left: 6, on right: 3 4
arguements (51)
    on left: 7 8, on right: 6
repeat_arguements (52)
    on left: 9 10, on right: 7 9 45
arguement (53)
    on left: 11, on right: 7 9
type (54)
    on left: 12 13 14 15 16, on right: 6 11 47 48 49
statements (55)
    on left: 17 18 19, on right: 6 17 18 30 34 35
controlstmt (56)
    on left: 20 21, on right: 18
statement (57)
    on left: 22 23 24 25 26 27 28 29, on right: 17
whilestmt (58)
    on left: 30, on right: 20
continuestmt (59)
    on left: 31, on right: 27
breakstmt (60)
    on left: 32, on right: 28
returnstmt (61)
    on left: 33, on right: 22
ifstmt (62)
    on left: 34 35, on right: 21
assignment (63)
    on left: 36 37 38 39 40 41, on right: 23 48
functioncall (64)
    on left: 42, on right: 24 40
passingargs (65)
    on left: 43 44, on right: 42
repeat_passingargs (66)
    on left: 45 46, on right: 43
declaration (67)
    on left: 47 48 49, on right: 25
input (68)
    on left: 50, on right: 37 41
output (69)
    on left: 51 52, on right: 26
array_declaration (70)
    on left: 53, on right: 49
expression (71)
    on left: 54, on right: 29 30 33 34 35 36 37 38 39 43 45 51 52 53
    80
assignexp (72)
    on left: 55 56, on right: 54 55
logicop (73)
    on left: 57 58, on right: 55
logicexp (74)
    on left: 59 60, on right: 55 56 59
eqop (75)
    on left: 61 62, on right: 59
equalityexp (76)
    on left: 63 64, on right: 59 60 63
relop (77)
    on left: 65 66 67 68, on right: 63
relationexp (78)
    on left: 69 70, on right: 63 64 69
addop (79)
    on left: 71 72, on right: 69
addexp (80)
    on left: 73 74, on right: 69 70 73
multop (81)
    on left: 75 76 77, on right: 73
multexp (82)
    on left: 78 79, on right: 73 74
term (83)
    on left: 80 81 82, on right: 78 79


State 0

    0 $accept: . prog_start $end

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 2 (prog_start)

    prog_start  go to state 6
    functions   go to state 7
    function    go to state 8
    type        go to state 9


State 1

   15 type: DOUBLE .

    $default  reduce using rule 15 (type)


State 2

   14 type: BOOLEAN .

    $default  reduce using rule 14 (type)


State 3

   16 type: CHAR .

    $default  reduce using rule 16 (type)


State 4

   12 type: VOID .

    $default  reduce using rule 12 (type)


State 5

   13 type: INTEGER .

    $default  reduce using rule 13 (type)


State 6

    0 $accept: prog_start . $end

    $end  shift, and go to state 10


State 7

    1 prog_start: functions .

    $default  reduce using rule 1 (prog_start)


State 8

    3 functions: function .
    4          | function . functions

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 3 (functions)

    functions  go to state 11
    function   go to state 8
    type       go to state 9


State 9

    6 function: type . func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    FUNCTION  shift, and go to state 12

    func_ident  go to state 13


State 10

    0 $accept: prog_start $end .

    $default  accept


State 11

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 12

    5 func_ident: FUNCTION . IDENTIFIER

    IDENTIFIER  shift, and go to state 14


State 13

    6 function: type func_ident . BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 15


State 14

    5 func_ident: FUNCTION IDENTIFIER .

    $default  reduce using rule 5 (func_ident)


State 15

    6 function: type func_ident BEGINPARAM . arguements ENDPARAM BEGINSCOPE statements ENDSCOPE

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    $default  reduce using rule 8 (arguements)

    arguements  go to state 16
    arguement   go to state 17
    type        go to state 18


State 16

    6 function: type func_ident BEGINPARAM arguements . ENDPARAM BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 19


State 17

    7 arguements: arguement . repeat_arguements

    COMMA  shift, and go to state 20

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 21


State 18

   11 arguement: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 22


State 19

    6 function: type func_ident BEGINPARAM arguements ENDPARAM . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 23


State 20

    9 repeat_arguements: COMMA . arguement repeat_arguements

    DOUBLE   shift, and go to state 1
    BOOLEAN  shift, and go to state 2
    CHAR     shift, and go to state 3
    VOID     shift, and go to state 4
    INTEGER  shift, and go to state 5

    arguement  go to state 24
    type       go to state 18


State 21

    7 arguements: arguement repeat_arguements .

    $default  reduce using rule 7 (arguements)


State 22

   11 arguement: type IDENTIFIER .

    $default  reduce using rule 11 (arguement)


State 23

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    NUMBER      shift, and go to state 33
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 34

    $default  reduce using rule 19 (statements)

    type          go to state 35
    statements    go to state 36
    controlstmt   go to state 37
    statement     go to state 38
    whilestmt     go to state 39
    continuestmt  go to state 40
    breakstmt     go to state 41
    returnstmt    go to state 42
    ifstmt        go to state 43
    assignment    go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    output        go to state 47
    expression    go to state 48
    assignexp     go to state 49
    logicexp      go to state 50
    equalityexp   go to state 51
    relationexp   go to state 52
    addexp        go to state 53
    multexp       go to state 54
    term          go to state 55


State 24

    9 repeat_arguements: COMMA arguement . repeat_arguements

    COMMA  shift, and go to state 20

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 56


State 25

   80 term: BEGINPARAM . expression ENDPARAM

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    expression   go to state 58
    assignexp    go to state 49
    logicexp     go to state 50
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 26

   34 ifstmt: IF . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 59


State 27

   30 whilestmt: WHILE . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 60


State 28

   31 continuestmt: CONTINUE .

    $default  reduce using rule 31 (continuestmt)


State 29

   32 breakstmt: BREAK .

    $default  reduce using rule 32 (breakstmt)


State 30

   33 returnstmt: RETURN . expression

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    expression   go to state 61
    assignexp    go to state 49
    logicexp     go to state 50
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 31

   78 multexp: NOT . term

    BEGINPARAM  shift, and go to state 25
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    term  go to state 62


State 32

   51 output: OUTPUT . BEGINPARAM expression ENDPARAM
   52       | OUTPUT . BEGINPARAM IDENTIFIER BEGINBRACKET expression ENDBRACKET ENDPARAM

    BEGINPARAM  shift, and go to state 63


State 33

   81 term: NUMBER .

    $default  reduce using rule 81 (term)


State 34

   36 assignment: IDENTIFIER . BEGINBRACKET expression ENDBRACKET ASSIGN expression
   37           | IDENTIFIER . BEGINBRACKET expression ENDBRACKET ASSIGN input
   38           | IDENTIFIER . ASSIGN IDENTIFIER BEGINBRACKET expression ENDBRACKET
   39           | IDENTIFIER . ASSIGN expression
   40           | IDENTIFIER . ASSIGN functioncall
   41           | IDENTIFIER . ASSIGN input
   42 functioncall: IDENTIFIER . BEGINPARAM passingargs ENDPARAM
   82 term: IDENTIFIER .

    ASSIGN        shift, and go to state 64
    BEGINPARAM    shift, and go to state 65
    BEGINBRACKET  shift, and go to state 66

    $default  reduce using rule 82 (term)


State 35

   47 declaration: type . IDENTIFIER
   48            | type . assignment
   49            | type . array_declaration

    IDENTIFIER  shift, and go to state 67

    assignment         go to state 68
    array_declaration  go to state 69


State 36

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 70


State 37

   18 statements: controlstmt . statements

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    NUMBER      shift, and go to state 33
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 34

    $default  reduce using rule 19 (statements)

    type          go to state 35
    statements    go to state 71
    controlstmt   go to state 37
    statement     go to state 38
    whilestmt     go to state 39
    continuestmt  go to state 40
    breakstmt     go to state 41
    returnstmt    go to state 42
    ifstmt        go to state 43
    assignment    go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    output        go to state 47
    expression    go to state 48
    assignexp     go to state 49
    logicexp      go to state 50
    equalityexp   go to state 51
    relationexp   go to state 52
    addexp        go to state 53
    multexp       go to state 54
    term          go to state 55


State 38

   17 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 72


State 39

   20 controlstmt: whilestmt .

    $default  reduce using rule 20 (controlstmt)


State 40

   27 statement: continuestmt .

    $default  reduce using rule 27 (statement)


State 41

   28 statement: breakstmt .

    $default  reduce using rule 28 (statement)


State 42

   22 statement: returnstmt .

    $default  reduce using rule 22 (statement)


State 43

   21 controlstmt: ifstmt .

    $default  reduce using rule 21 (controlstmt)


State 44

   23 statement: assignment .

    $default  reduce using rule 23 (statement)


State 45

   24 statement: functioncall .

    $default  reduce using rule 24 (statement)


State 46

   25 statement: declaration .

    $default  reduce using rule 25 (statement)


State 47

   26 statement: output .

    $default  reduce using rule 26 (statement)


State 48

   29 statement: expression .

    $default  reduce using rule 29 (statement)


State 49

   54 expression: assignexp .

    $default  reduce using rule 54 (expression)


State 50

   55 assignexp: logicexp . logicop assignexp
   56          | logicexp .

    AND  shift, and go to state 73
    OR   shift, and go to state 74

    $default  reduce using rule 56 (assignexp)

    logicop  go to state 75


State 51

   59 logicexp: equalityexp . eqop logicexp
   60         | equalityexp .

    EQ  shift, and go to state 76
    NE  shift, and go to state 77

    $default  reduce using rule 60 (logicexp)

    eqop  go to state 78


State 52

   63 equalityexp: relationexp . relop equalityexp
   64            | relationexp .

    LT   shift, and go to state 79
    LTE  shift, and go to state 80
    GT   shift, and go to state 81
    GTE  shift, and go to state 82

    $default  reduce using rule 64 (equalityexp)

    relop  go to state 83


State 53

   69 relationexp: addexp . addop relationexp
   70            | addexp .

    ADD  shift, and go to state 84
    SUB  shift, and go to state 85

    $default  reduce using rule 70 (relationexp)

    addop  go to state 86


State 54

   73 addexp: multexp . multop addexp
   74       | multexp .

    DIV  shift, and go to state 87
    MUL  shift, and go to state 88
    MOD  shift, and go to state 89

    $default  reduce using rule 74 (addexp)

    multop  go to state 90


State 55

   79 multexp: term .

    $default  reduce using rule 79 (multexp)


State 56

    9 repeat_arguements: COMMA arguement repeat_arguements .

    $default  reduce using rule 9 (repeat_arguements)


State 57

   82 term: IDENTIFIER .

    $default  reduce using rule 82 (term)


State 58

   80 term: BEGINPARAM expression . ENDPARAM

    ENDPARAM  shift, and go to state 91


State 59

   34 ifstmt: IF BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    expression   go to state 92
    assignexp    go to state 49
    logicexp     go to state 50
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 60

   30 whilestmt: WHILE BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    expression   go to state 93
    assignexp    go to state 49
    logicexp     go to state 50
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 61

   33 returnstmt: RETURN expression .

    $default  reduce using rule 33 (returnstmt)


State 62

   78 multexp: NOT term .

    $default  reduce using rule 78 (multexp)


State 63

   51 output: OUTPUT BEGINPARAM . expression ENDPARAM
   52       | OUTPUT BEGINPARAM . IDENTIFIER BEGINBRACKET expression ENDBRACKET ENDPARAM

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 94

    expression   go to state 95
    assignexp    go to state 49
    logicexp     go to state 50
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 64

   38 assignment: IDENTIFIER ASSIGN . IDENTIFIER BEGINBRACKET expression ENDBRACKET
   39           | IDENTIFIER ASSIGN . expression
   40           | IDENTIFIER ASSIGN . functioncall
   41           | IDENTIFIER ASSIGN . input

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 96
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 97

    functioncall  go to state 98
    input         go to state 99
    expression    go to state 100
    assignexp     go to state 49
    logicexp      go to state 50
    equalityexp   go to state 51
    relationexp   go to state 52
    addexp        go to state 53
    multexp       go to state 54
    term          go to state 55


State 65

   42 functioncall: IDENTIFIER BEGINPARAM . passingargs ENDPARAM

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    $default  reduce using rule 44 (passingargs)

    passingargs  go to state 101
    expression   go to state 102
    assignexp    go to state 49
    logicexp     go to state 50
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 66

   36 assignment: IDENTIFIER BEGINBRACKET . expression ENDBRACKET ASSIGN expression
   37           | IDENTIFIER BEGINBRACKET . expression ENDBRACKET ASSIGN input

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    expression   go to state 103
    assignexp    go to state 49
    logicexp     go to state 50
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 67

   36 assignment: IDENTIFIER . BEGINBRACKET expression ENDBRACKET ASSIGN expression
   37           | IDENTIFIER . BEGINBRACKET expression ENDBRACKET ASSIGN input
   38           | IDENTIFIER . ASSIGN IDENTIFIER BEGINBRACKET expression ENDBRACKET
   39           | IDENTIFIER . ASSIGN expression
   40           | IDENTIFIER . ASSIGN functioncall
   41           | IDENTIFIER . ASSIGN input
   47 declaration: type IDENTIFIER .
   53 array_declaration: IDENTIFIER . BEGINBRACKET expression ENDBRACKET

    ASSIGN        shift, and go to state 64
    BEGINBRACKET  shift, and go to state 104

    $default  reduce using rule 47 (declaration)


State 68

   48 declaration: type assignment .

    $default  reduce using rule 48 (declaration)


State 69

   49 declaration: type array_declaration .

    $default  reduce using rule 49 (declaration)


State 70

    6 function: type func_ident BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 6 (function)


State 71

   18 statements: controlstmt statements .

    $default  reduce using rule 18 (statements)


State 72

   17 statements: statement SEMICOLON . statements

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    NUMBER      shift, and go to state 33
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 34

    $default  reduce using rule 19 (statements)

    type          go to state 35
    statements    go to state 105
    controlstmt   go to state 37
    statement     go to state 38
    whilestmt     go to state 39
    continuestmt  go to state 40
    breakstmt     go to state 41
    returnstmt    go to state 42
    ifstmt        go to state 43
    assignment    go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    output        go to state 47
    expression    go to state 48
    assignexp     go to state 49
    logicexp      go to state 50
    equalityexp   go to state 51
    relationexp   go to state 52
    addexp        go to state 53
    multexp       go to state 54
    term          go to state 55


State 73

   57 logicop: AND .

    $default  reduce using rule 57 (logicop)


State 74

   58 logicop: OR .

    $default  reduce using rule 58 (logicop)


State 75

   55 assignexp: logicexp logicop . assignexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    assignexp    go to state 106
    logicexp     go to state 50
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 76

   61 eqop: EQ .

    $default  reduce using rule 61 (eqop)


State 77

   62 eqop: NE .

    $default  reduce using rule 62 (eqop)


State 78

   59 logicexp: equalityexp eqop . logicexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    logicexp     go to state 107
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 79

   65 relop: LT .

    $default  reduce using rule 65 (relop)


State 80

   66 relop: LTE .

    $default  reduce using rule 66 (relop)


State 81

   67 relop: GT .

    $default  reduce using rule 67 (relop)


State 82

   68 relop: GTE .

    $default  reduce using rule 68 (relop)


State 83

   63 equalityexp: relationexp relop . equalityexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    equalityexp  go to state 108
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 84

   71 addop: ADD .

    $default  reduce using rule 71 (addop)


State 85

   72 addop: SUB .

    $default  reduce using rule 72 (addop)


State 86

   69 relationexp: addexp addop . relationexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    relationexp  go to state 109
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 87

   76 multop: DIV .

    $default  reduce using rule 76 (multop)


State 88

   75 multop: MUL .

    $default  reduce using rule 75 (multop)


State 89

   77 multop: MOD .

    $default  reduce using rule 77 (multop)


State 90

   73 addexp: multexp multop . addexp

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    addexp   go to state 110
    multexp  go to state 54
    term     go to state 55


State 91

   80 term: BEGINPARAM expression ENDPARAM .

    $default  reduce using rule 80 (term)


State 92

   34 ifstmt: IF BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 111


State 93

   30 whilestmt: WHILE BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 112


State 94

   52 output: OUTPUT BEGINPARAM IDENTIFIER . BEGINBRACKET expression ENDBRACKET ENDPARAM
   82 term: IDENTIFIER .

    BEGINBRACKET  shift, and go to state 113

    $default  reduce using rule 82 (term)


State 95

   51 output: OUTPUT BEGINPARAM expression . ENDPARAM

    ENDPARAM  shift, and go to state 114


State 96

   50 input: INPUT . BEGINPARAM ENDPARAM

    BEGINPARAM  shift, and go to state 115


State 97

   38 assignment: IDENTIFIER ASSIGN IDENTIFIER . BEGINBRACKET expression ENDBRACKET
   42 functioncall: IDENTIFIER . BEGINPARAM passingargs ENDPARAM
   82 term: IDENTIFIER .

    BEGINPARAM    shift, and go to state 65
    BEGINBRACKET  shift, and go to state 116

    $default  reduce using rule 82 (term)


State 98

   40 assignment: IDENTIFIER ASSIGN functioncall .

    $default  reduce using rule 40 (assignment)


State 99

   41 assignment: IDENTIFIER ASSIGN input .

    $default  reduce using rule 41 (assignment)


State 100

   39 assignment: IDENTIFIER ASSIGN expression .

    $default  reduce using rule 39 (assignment)


State 101

   42 functioncall: IDENTIFIER BEGINPARAM passingargs . ENDPARAM

    ENDPARAM  shift, and go to state 117


State 102

   43 passingargs: expression . repeat_passingargs

    COMMA  shift, and go to state 118

    $default  reduce using rule 46 (repeat_passingargs)

    repeat_passingargs  go to state 119


State 103

   36 assignment: IDENTIFIER BEGINBRACKET expression . ENDBRACKET ASSIGN expression
   37           | IDENTIFIER BEGINBRACKET expression . ENDBRACKET ASSIGN input

    ENDBRACKET  shift, and go to state 120


State 104

   36 assignment: IDENTIFIER BEGINBRACKET . expression ENDBRACKET ASSIGN expression
   37           | IDENTIFIER BEGINBRACKET . expression ENDBRACKET ASSIGN input
   53 array_declaration: IDENTIFIER BEGINBRACKET . expression ENDBRACKET

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    expression   go to state 121
    assignexp    go to state 49
    logicexp     go to state 50
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 105

   17 statements: statement SEMICOLON statements .

    $default  reduce using rule 17 (statements)


State 106

   55 assignexp: logicexp logicop assignexp .

    $default  reduce using rule 55 (assignexp)


State 107

   59 logicexp: equalityexp eqop logicexp .

    $default  reduce using rule 59 (logicexp)


State 108

   63 equalityexp: relationexp relop equalityexp .

    $default  reduce using rule 63 (equalityexp)


State 109

   69 relationexp: addexp addop relationexp .

    $default  reduce using rule 69 (relationexp)


State 110

   73 addexp: multexp multop addexp .

    $default  reduce using rule 73 (addexp)


State 111

   34 ifstmt: IF BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 122


State 112

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 123


State 113

   52 output: OUTPUT BEGINPARAM IDENTIFIER BEGINBRACKET . expression ENDBRACKET ENDPARAM

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    expression   go to state 124
    assignexp    go to state 49
    logicexp     go to state 50
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 114

   51 output: OUTPUT BEGINPARAM expression ENDPARAM .

    $default  reduce using rule 51 (output)


State 115

   50 input: INPUT BEGINPARAM . ENDPARAM

    ENDPARAM  shift, and go to state 125


State 116

   38 assignment: IDENTIFIER ASSIGN IDENTIFIER BEGINBRACKET . expression ENDBRACKET

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    expression   go to state 126
    assignexp    go to state 49
    logicexp     go to state 50
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 117

   42 functioncall: IDENTIFIER BEGINPARAM passingargs ENDPARAM .

    $default  reduce using rule 42 (functioncall)


State 118

   45 repeat_passingargs: COMMA . expression repeat_arguements

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    expression   go to state 127
    assignexp    go to state 49
    logicexp     go to state 50
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 119

   43 passingargs: expression repeat_passingargs .

    $default  reduce using rule 43 (passingargs)


State 120

   36 assignment: IDENTIFIER BEGINBRACKET expression ENDBRACKET . ASSIGN expression
   37           | IDENTIFIER BEGINBRACKET expression ENDBRACKET . ASSIGN input

    ASSIGN  shift, and go to state 128


State 121

   36 assignment: IDENTIFIER BEGINBRACKET expression . ENDBRACKET ASSIGN expression
   37           | IDENTIFIER BEGINBRACKET expression . ENDBRACKET ASSIGN input
   53 array_declaration: IDENTIFIER BEGINBRACKET expression . ENDBRACKET

    ENDBRACKET  shift, and go to state 129


State 122

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    NUMBER      shift, and go to state 33
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 34

    $default  reduce using rule 19 (statements)

    type          go to state 35
    statements    go to state 130
    controlstmt   go to state 37
    statement     go to state 38
    whilestmt     go to state 39
    continuestmt  go to state 40
    breakstmt     go to state 41
    returnstmt    go to state 42
    ifstmt        go to state 43
    assignment    go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    output        go to state 47
    expression    go to state 48
    assignexp     go to state 49
    logicexp      go to state 50
    equalityexp   go to state 51
    relationexp   go to state 52
    addexp        go to state 53
    multexp       go to state 54
    term          go to state 55


State 123

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    NUMBER      shift, and go to state 33
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 34

    $default  reduce using rule 19 (statements)

    type          go to state 35
    statements    go to state 131
    controlstmt   go to state 37
    statement     go to state 38
    whilestmt     go to state 39
    continuestmt  go to state 40
    breakstmt     go to state 41
    returnstmt    go to state 42
    ifstmt        go to state 43
    assignment    go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    output        go to state 47
    expression    go to state 48
    assignexp     go to state 49
    logicexp      go to state 50
    equalityexp   go to state 51
    relationexp   go to state 52
    addexp        go to state 53
    multexp       go to state 54
    term          go to state 55


State 124

   52 output: OUTPUT BEGINPARAM IDENTIFIER BEGINBRACKET expression . ENDBRACKET ENDPARAM

    ENDBRACKET  shift, and go to state 132


State 125

   50 input: INPUT BEGINPARAM ENDPARAM .

    $default  reduce using rule 50 (input)


State 126

   38 assignment: IDENTIFIER ASSIGN IDENTIFIER BEGINBRACKET expression . ENDBRACKET

    ENDBRACKET  shift, and go to state 133


State 127

   45 repeat_passingargs: COMMA expression . repeat_arguements

    COMMA  shift, and go to state 20

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 134


State 128

   36 assignment: IDENTIFIER BEGINBRACKET expression ENDBRACKET ASSIGN . expression
   37           | IDENTIFIER BEGINBRACKET expression ENDBRACKET ASSIGN . input

    BEGINPARAM  shift, and go to state 25
    NOT         shift, and go to state 31
    INPUT       shift, and go to state 96
    NUMBER      shift, and go to state 33
    IDENTIFIER  shift, and go to state 57

    input        go to state 135
    expression   go to state 136
    assignexp    go to state 49
    logicexp     go to state 50
    equalityexp  go to state 51
    relationexp  go to state 52
    addexp       go to state 53
    multexp      go to state 54
    term         go to state 55


State 129

   36 assignment: IDENTIFIER BEGINBRACKET expression ENDBRACKET . ASSIGN expression
   37           | IDENTIFIER BEGINBRACKET expression ENDBRACKET . ASSIGN input
   53 array_declaration: IDENTIFIER BEGINBRACKET expression ENDBRACKET .

    ASSIGN  shift, and go to state 128

    $default  reduce using rule 53 (array_declaration)


State 130

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    ENDSCOPE  shift, and go to state 137


State 131

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 138


State 132

   52 output: OUTPUT BEGINPARAM IDENTIFIER BEGINBRACKET expression ENDBRACKET . ENDPARAM

    ENDPARAM  shift, and go to state 139


State 133

   38 assignment: IDENTIFIER ASSIGN IDENTIFIER BEGINBRACKET expression ENDBRACKET .

    $default  reduce using rule 38 (assignment)


State 134

   45 repeat_passingargs: COMMA expression repeat_arguements .

    $default  reduce using rule 45 (repeat_passingargs)


State 135

   37 assignment: IDENTIFIER BEGINBRACKET expression ENDBRACKET ASSIGN input .

    $default  reduce using rule 37 (assignment)


State 136

   36 assignment: IDENTIFIER BEGINBRACKET expression ENDBRACKET ASSIGN expression .

    $default  reduce using rule 36 (assignment)


State 137

   34 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE .
   35       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE . ELSE BEGINSCOPE statements ENDSCOPE

    ELSE  shift, and go to state 140

    $default  reduce using rule 34 (ifstmt)


State 138

   30 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 30 (whilestmt)


State 139

   52 output: OUTPUT BEGINPARAM IDENTIFIER BEGINBRACKET expression ENDBRACKET ENDPARAM .

    $default  reduce using rule 52 (output)


State 140

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 141


State 141

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE . statements ENDSCOPE

    DOUBLE      shift, and go to state 1
    BOOLEAN     shift, and go to state 2
    CHAR        shift, and go to state 3
    BEGINPARAM  shift, and go to state 25
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    BREAK       shift, and go to state 29
    RETURN      shift, and go to state 30
    VOID        shift, and go to state 4
    NOT         shift, and go to state 31
    OUTPUT      shift, and go to state 32
    NUMBER      shift, and go to state 33
    INTEGER     shift, and go to state 5
    IDENTIFIER  shift, and go to state 34

    $default  reduce using rule 19 (statements)

    type          go to state 35
    statements    go to state 142
    controlstmt   go to state 37
    statement     go to state 38
    whilestmt     go to state 39
    continuestmt  go to state 40
    breakstmt     go to state 41
    returnstmt    go to state 42
    ifstmt        go to state 43
    assignment    go to state 44
    functioncall  go to state 45
    declaration   go to state 46
    output        go to state 47
    expression    go to state 48
    assignexp     go to state 49
    logicexp      go to state 50
    equalityexp   go to state 51
    relationexp   go to state 52
    addexp        go to state 53
    multexp       go to state 54
    term          go to state 55


State 142

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 143


State 143

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 35 (ifstmt)
