Terminals unused in grammar

   FOR
   TRUE
   FALSE
   DECIMAL


Grammar

    0 $accept: prog_start $end

    1 prog_start: functions
    2           | %empty

    3 functions: function
    4          | function functions

    5 function: type FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE
    6         | type FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM SEMICOLON

    7 arguements: arguement repeat_arguements
    8           | %empty

    9 repeat_arguements: COMMA arguement repeat_arguements
   10                  | %empty

   11 arguement: type IDENTIFIER
   12          | type array

   13 type: VOID
   14     | INTEGER
   15     | BOOLEAN
   16     | DOUBLE
   17     | CHAR

   18 statements: statement SEMICOLON statements
   19           | controlstmt statements
   20           | %empty

   21 controlstmt: whilestmt
   22            | ifstmt

   23 statement: returnstmt
   24          | assignment
   25          | functioncall
   26          | declaration
   27          | io
   28          | continuestmt
   29          | breakstmt
   30          | expression

   31 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE

   32 continuestmt: CONTINUE

   33 breakstmt: BREAK

   34 returnstmt: RETURN expression

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   36       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

   37 assignment: IDENTIFIER ASSIGN expression
   38           | array ASSIGN expression
   39           | IDENTIFIER ASSIGN functioncall
   40           | IDENTIFIER ASSIGN io

   41 functioncall: IDENTIFIER BEGINPARAM passingargs ENDPARAM

   42 passingargs: expression repeat_passingargs
   43            | %empty

   44 repeat_passingargs: COMMA expression repeat_arguements
   45                   | %empty

   46 declaration: type IDENTIFIER
   47            | type assignment
   48            | type array

   49 io: INPUT BEGINPARAM ENDPARAM
   50   | OUTPUT BEGINPARAM ref ENDPARAM

   51 ref: IDENTIFIER
   52    | array

   53 array: IDENTIFIER BEGINBRACKET expression ENDBRACKET

   54 expression: assignexp

   55 assignexp: logicexp logicop assignexp
   56          | logicexp

   57 logicop: AND
   58        | OR

   59 logicexp: equalityexp eqop logicexp
   60         | equalityexp

   61 eqop: EQ
   62     | NE

   63 equalityexp: relationexp relop equalityexp
   64            | relationexp

   65 relop: LT
   66      | LTE
   67      | GT
   68      | GTE

   69 relationexp: addexp addop relationexp
   70            | addexp

   71 addop: ADD
   72      | SUB

   73 addexp: multexp multop addexp
   74       | multexp

   75 multop: MUL
   76       | DIV
   77       | MOD

   78 multexp: NOT term
   79        | term

   80 term: BEGINPARAM expression ENDPARAM
   81     | NUMBER
   82     | ref


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258) 14
DOUBLE (259) 16
BOOLEAN (260) 15
CHAR (261) 17
ASSIGN (262) 37 38 39 40
ADD (263) 71
SUB (264) 72
DIV (265) 76
MUL (266) 75
MOD (267) 77
FUNCTION (268) 5 6
BEGINSCOPE (269) 5 31 35 36
ENDSCOPE (270) 5 31 35 36
BEGINPARAM (271) 5 6 31 35 36 41 49 50 80
ENDPARAM (272) 5 6 31 35 36 41 49 50 80
BEGINBRACKET (273) 53
ENDBRACKET (274) 53
IF (275) 35 36
ELSE (276) 36
FOR (277)
WHILE (278) 31
CONTINUE (279) 32
BREAK (280) 33
TRUE (281)
FALSE (282)
RETURN (283) 34
VOID (284) 13
NOT (285) 78
AND (286) 57
OR (287) 58
SEMICOLON (288) 6 18
COMMA (289) 9 44
OUTPUT (290) 50
INPUT (291) 49
NUMBER (292) 81
DECIMAL (293)
EQ (294) 61
LT (295) 65
LTE (296) 66
GT (297) 67
GTE (298) 68
NE (299) 62
IDENTIFIER (300) 5 6 11 37 39 40 41 46 51 53


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
prog_start (47)
    on left: 1 2, on right: 0
functions (48)
    on left: 3 4, on right: 1 4
function (49)
    on left: 5 6, on right: 3 4
arguements (50)
    on left: 7 8, on right: 5 6
repeat_arguements (51)
    on left: 9 10, on right: 7 9 44
arguement (52)
    on left: 11 12, on right: 7 9
type (53)
    on left: 13 14 15 16 17, on right: 5 6 11 12 46 47 48
statements (54)
    on left: 18 19 20, on right: 5 18 19 31 35 36
controlstmt (55)
    on left: 21 22, on right: 19
statement (56)
    on left: 23 24 25 26 27 28 29 30, on right: 18
whilestmt (57)
    on left: 31, on right: 21
continuestmt (58)
    on left: 32, on right: 28
breakstmt (59)
    on left: 33, on right: 29
returnstmt (60)
    on left: 34, on right: 23
ifstmt (61)
    on left: 35 36, on right: 22
assignment (62)
    on left: 37 38 39 40, on right: 24 47
functioncall (63)
    on left: 41, on right: 25 39
passingargs (64)
    on left: 42 43, on right: 41
repeat_passingargs (65)
    on left: 44 45, on right: 42
declaration (66)
    on left: 46 47 48, on right: 26
io (67)
    on left: 49 50, on right: 27 40
ref (68)
    on left: 51 52, on right: 50 82
array (69)
    on left: 53, on right: 12 38 48 52
expression (70)
    on left: 54, on right: 30 31 34 35 36 37 38 42 44 53 80
assignexp (71)
    on left: 55 56, on right: 54 55
logicop (72)
    on left: 57 58, on right: 55
logicexp (73)
    on left: 59 60, on right: 55 56 59
eqop (74)
    on left: 61 62, on right: 59
equalityexp (75)
    on left: 63 64, on right: 59 60 63
relop (76)
    on left: 65 66 67 68, on right: 63
relationexp (77)
    on left: 69 70, on right: 63 64 69
addop (78)
    on left: 71 72, on right: 69
addexp (79)
    on left: 73 74, on right: 69 70 73
multop (80)
    on left: 75 76 77, on right: 73
multexp (81)
    on left: 78 79, on right: 73 74
term (82)
    on left: 80 81 82, on right: 78 79


State 0

    0 $accept: . prog_start $end

    INTEGER  shift, and go to state 1
    DOUBLE   shift, and go to state 2
    BOOLEAN  shift, and go to state 3
    CHAR     shift, and go to state 4
    VOID     shift, and go to state 5

    $default  reduce using rule 2 (prog_start)

    prog_start  go to state 6
    functions   go to state 7
    function    go to state 8
    type        go to state 9


State 1

   14 type: INTEGER .

    $default  reduce using rule 14 (type)


State 2

   16 type: DOUBLE .

    $default  reduce using rule 16 (type)


State 3

   15 type: BOOLEAN .

    $default  reduce using rule 15 (type)


State 4

   17 type: CHAR .

    $default  reduce using rule 17 (type)


State 5

   13 type: VOID .

    $default  reduce using rule 13 (type)


State 6

    0 $accept: prog_start . $end

    $end  shift, and go to state 10


State 7

    1 prog_start: functions .

    $default  reduce using rule 1 (prog_start)


State 8

    3 functions: function .
    4          | function . functions

    INTEGER  shift, and go to state 1
    DOUBLE   shift, and go to state 2
    BOOLEAN  shift, and go to state 3
    CHAR     shift, and go to state 4
    VOID     shift, and go to state 5

    $default  reduce using rule 3 (functions)

    functions  go to state 11
    function   go to state 8
    type       go to state 9


State 9

    5 function: type . FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE
    6         | type . FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM SEMICOLON

    FUNCTION  shift, and go to state 12


State 10

    0 $accept: prog_start $end .

    $default  accept


State 11

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 12

    5 function: type FUNCTION . IDENTIFIER BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE
    6         | type FUNCTION . IDENTIFIER BEGINPARAM arguements ENDPARAM SEMICOLON

    IDENTIFIER  shift, and go to state 13


State 13

    5 function: type FUNCTION IDENTIFIER . BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE
    6         | type FUNCTION IDENTIFIER . BEGINPARAM arguements ENDPARAM SEMICOLON

    BEGINPARAM  shift, and go to state 14


State 14

    5 function: type FUNCTION IDENTIFIER BEGINPARAM . arguements ENDPARAM BEGINSCOPE statements ENDSCOPE
    6         | type FUNCTION IDENTIFIER BEGINPARAM . arguements ENDPARAM SEMICOLON

    INTEGER  shift, and go to state 1
    DOUBLE   shift, and go to state 2
    BOOLEAN  shift, and go to state 3
    CHAR     shift, and go to state 4
    VOID     shift, and go to state 5

    $default  reduce using rule 8 (arguements)

    arguements  go to state 15
    arguement   go to state 16
    type        go to state 17


State 15

    5 function: type FUNCTION IDENTIFIER BEGINPARAM arguements . ENDPARAM BEGINSCOPE statements ENDSCOPE
    6         | type FUNCTION IDENTIFIER BEGINPARAM arguements . ENDPARAM SEMICOLON

    ENDPARAM  shift, and go to state 18


State 16

    7 arguements: arguement . repeat_arguements

    COMMA  shift, and go to state 19

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 20


State 17

   11 arguement: type . IDENTIFIER
   12          | type . array

    IDENTIFIER  shift, and go to state 21

    array  go to state 22


State 18

    5 function: type FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM . BEGINSCOPE statements ENDSCOPE
    6         | type FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM . SEMICOLON

    BEGINSCOPE  shift, and go to state 23
    SEMICOLON   shift, and go to state 24


State 19

    9 repeat_arguements: COMMA . arguement repeat_arguements

    INTEGER  shift, and go to state 1
    DOUBLE   shift, and go to state 2
    BOOLEAN  shift, and go to state 3
    CHAR     shift, and go to state 4
    VOID     shift, and go to state 5

    arguement  go to state 25
    type       go to state 17


State 20

    7 arguements: arguement repeat_arguements .

    $default  reduce using rule 7 (arguements)


State 21

   11 arguement: type IDENTIFIER .
   53 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET

    BEGINBRACKET  shift, and go to state 26

    $default  reduce using rule 11 (arguement)


State 22

   12 arguement: type array .

    $default  reduce using rule 12 (arguement)


State 23

    5 function: type FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM BEGINSCOPE . statements ENDSCOPE

    INTEGER     shift, and go to state 1
    DOUBLE      shift, and go to state 2
    BOOLEAN     shift, and go to state 3
    CHAR        shift, and go to state 4
    BEGINPARAM  shift, and go to state 27
    IF          shift, and go to state 28
    WHILE       shift, and go to state 29
    CONTINUE    shift, and go to state 30
    BREAK       shift, and go to state 31
    RETURN      shift, and go to state 32
    VOID        shift, and go to state 5
    NOT         shift, and go to state 33
    OUTPUT      shift, and go to state 34
    INPUT       shift, and go to state 35
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 37

    $default  reduce using rule 20 (statements)

    type          go to state 38
    statements    go to state 39
    controlstmt   go to state 40
    statement     go to state 41
    whilestmt     go to state 42
    continuestmt  go to state 43
    breakstmt     go to state 44
    returnstmt    go to state 45
    ifstmt        go to state 46
    assignment    go to state 47
    functioncall  go to state 48
    declaration   go to state 49
    io            go to state 50
    ref           go to state 51
    array         go to state 52
    expression    go to state 53
    assignexp     go to state 54
    logicexp      go to state 55
    equalityexp   go to state 56
    relationexp   go to state 57
    addexp        go to state 58
    multexp       go to state 59
    term          go to state 60


State 24

    6 function: type FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM SEMICOLON .

    $default  reduce using rule 6 (function)


State 25

    9 repeat_arguements: COMMA arguement . repeat_arguements

    COMMA  shift, and go to state 19

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 61


State 26

   53 array: IDENTIFIER BEGINBRACKET . expression ENDBRACKET

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    ref          go to state 51
    array        go to state 63
    expression   go to state 64
    assignexp    go to state 54
    logicexp     go to state 55
    equalityexp  go to state 56
    relationexp  go to state 57
    addexp       go to state 58
    multexp      go to state 59
    term         go to state 60


State 27

   80 term: BEGINPARAM . expression ENDPARAM

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    ref          go to state 51
    array        go to state 63
    expression   go to state 65
    assignexp    go to state 54
    logicexp     go to state 55
    equalityexp  go to state 56
    relationexp  go to state 57
    addexp       go to state 58
    multexp      go to state 59
    term         go to state 60


State 28

   35 ifstmt: IF . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   36       | IF . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 66


State 29

   31 whilestmt: WHILE . BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 67


State 30

   32 continuestmt: CONTINUE .

    $default  reduce using rule 32 (continuestmt)


State 31

   33 breakstmt: BREAK .

    $default  reduce using rule 33 (breakstmt)


State 32

   34 returnstmt: RETURN . expression

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    ref          go to state 51
    array        go to state 63
    expression   go to state 68
    assignexp    go to state 54
    logicexp     go to state 55
    equalityexp  go to state 56
    relationexp  go to state 57
    addexp       go to state 58
    multexp      go to state 59
    term         go to state 60


State 33

   78 multexp: NOT . term

    BEGINPARAM  shift, and go to state 27
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    ref    go to state 51
    array  go to state 63
    term   go to state 69


State 34

   50 io: OUTPUT . BEGINPARAM ref ENDPARAM

    BEGINPARAM  shift, and go to state 70


State 35

   49 io: INPUT . BEGINPARAM ENDPARAM

    BEGINPARAM  shift, and go to state 71


State 36

   81 term: NUMBER .

    $default  reduce using rule 81 (term)


State 37

   37 assignment: IDENTIFIER . ASSIGN expression
   39           | IDENTIFIER . ASSIGN functioncall
   40           | IDENTIFIER . ASSIGN io
   41 functioncall: IDENTIFIER . BEGINPARAM passingargs ENDPARAM
   51 ref: IDENTIFIER .
   53 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET

    ASSIGN        shift, and go to state 72
    BEGINPARAM    shift, and go to state 73
    BEGINBRACKET  shift, and go to state 26

    $default  reduce using rule 51 (ref)


State 38

   46 declaration: type . IDENTIFIER
   47            | type . assignment
   48            | type . array

    IDENTIFIER  shift, and go to state 74

    assignment  go to state 75
    array       go to state 76


State 39

    5 function: type FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 77


State 40

   19 statements: controlstmt . statements

    INTEGER     shift, and go to state 1
    DOUBLE      shift, and go to state 2
    BOOLEAN     shift, and go to state 3
    CHAR        shift, and go to state 4
    BEGINPARAM  shift, and go to state 27
    IF          shift, and go to state 28
    WHILE       shift, and go to state 29
    CONTINUE    shift, and go to state 30
    BREAK       shift, and go to state 31
    RETURN      shift, and go to state 32
    VOID        shift, and go to state 5
    NOT         shift, and go to state 33
    OUTPUT      shift, and go to state 34
    INPUT       shift, and go to state 35
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 37

    $default  reduce using rule 20 (statements)

    type          go to state 38
    statements    go to state 78
    controlstmt   go to state 40
    statement     go to state 41
    whilestmt     go to state 42
    continuestmt  go to state 43
    breakstmt     go to state 44
    returnstmt    go to state 45
    ifstmt        go to state 46
    assignment    go to state 47
    functioncall  go to state 48
    declaration   go to state 49
    io            go to state 50
    ref           go to state 51
    array         go to state 52
    expression    go to state 53
    assignexp     go to state 54
    logicexp      go to state 55
    equalityexp   go to state 56
    relationexp   go to state 57
    addexp        go to state 58
    multexp       go to state 59
    term          go to state 60


State 41

   18 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 79


State 42

   21 controlstmt: whilestmt .

    $default  reduce using rule 21 (controlstmt)


State 43

   28 statement: continuestmt .

    $default  reduce using rule 28 (statement)


State 44

   29 statement: breakstmt .

    $default  reduce using rule 29 (statement)


State 45

   23 statement: returnstmt .

    $default  reduce using rule 23 (statement)


State 46

   22 controlstmt: ifstmt .

    $default  reduce using rule 22 (controlstmt)


State 47

   24 statement: assignment .

    $default  reduce using rule 24 (statement)


State 48

   25 statement: functioncall .

    $default  reduce using rule 25 (statement)


State 49

   26 statement: declaration .

    $default  reduce using rule 26 (statement)


State 50

   27 statement: io .

    $default  reduce using rule 27 (statement)


State 51

   82 term: ref .

    $default  reduce using rule 82 (term)


State 52

   38 assignment: array . ASSIGN expression
   52 ref: array .

    ASSIGN  shift, and go to state 80

    $default  reduce using rule 52 (ref)


State 53

   30 statement: expression .

    $default  reduce using rule 30 (statement)


State 54

   54 expression: assignexp .

    $default  reduce using rule 54 (expression)


State 55

   55 assignexp: logicexp . logicop assignexp
   56          | logicexp .

    AND  shift, and go to state 81
    OR   shift, and go to state 82

    $default  reduce using rule 56 (assignexp)

    logicop  go to state 83


State 56

   59 logicexp: equalityexp . eqop logicexp
   60         | equalityexp .

    EQ  shift, and go to state 84
    NE  shift, and go to state 85

    $default  reduce using rule 60 (logicexp)

    eqop  go to state 86


State 57

   63 equalityexp: relationexp . relop equalityexp
   64            | relationexp .

    LT   shift, and go to state 87
    LTE  shift, and go to state 88
    GT   shift, and go to state 89
    GTE  shift, and go to state 90

    $default  reduce using rule 64 (equalityexp)

    relop  go to state 91


State 58

   69 relationexp: addexp . addop relationexp
   70            | addexp .

    ADD  shift, and go to state 92
    SUB  shift, and go to state 93

    $default  reduce using rule 70 (relationexp)

    addop  go to state 94


State 59

   73 addexp: multexp . multop addexp
   74       | multexp .

    DIV  shift, and go to state 95
    MUL  shift, and go to state 96
    MOD  shift, and go to state 97

    $default  reduce using rule 74 (addexp)

    multop  go to state 98


State 60

   79 multexp: term .

    $default  reduce using rule 79 (multexp)


State 61

    9 repeat_arguements: COMMA arguement repeat_arguements .

    $default  reduce using rule 9 (repeat_arguements)


State 62

   51 ref: IDENTIFIER .
   53 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET

    BEGINBRACKET  shift, and go to state 26

    $default  reduce using rule 51 (ref)


State 63

   52 ref: array .

    $default  reduce using rule 52 (ref)


State 64

   53 array: IDENTIFIER BEGINBRACKET expression . ENDBRACKET

    ENDBRACKET  shift, and go to state 99


State 65

   80 term: BEGINPARAM expression . ENDPARAM

    ENDPARAM  shift, and go to state 100


State 66

   35 ifstmt: IF BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE
   36       | IF BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    ref          go to state 51
    array        go to state 63
    expression   go to state 101
    assignexp    go to state 54
    logicexp     go to state 55
    equalityexp  go to state 56
    relationexp  go to state 57
    addexp       go to state 58
    multexp      go to state 59
    term         go to state 60


State 67

   31 whilestmt: WHILE BEGINPARAM . expression ENDPARAM BEGINSCOPE statements ENDSCOPE

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    ref          go to state 51
    array        go to state 63
    expression   go to state 102
    assignexp    go to state 54
    logicexp     go to state 55
    equalityexp  go to state 56
    relationexp  go to state 57
    addexp       go to state 58
    multexp      go to state 59
    term         go to state 60


State 68

   34 returnstmt: RETURN expression .

    $default  reduce using rule 34 (returnstmt)


State 69

   78 multexp: NOT term .

    $default  reduce using rule 78 (multexp)


State 70

   50 io: OUTPUT BEGINPARAM . ref ENDPARAM

    IDENTIFIER  shift, and go to state 62

    ref    go to state 103
    array  go to state 63


State 71

   49 io: INPUT BEGINPARAM . ENDPARAM

    ENDPARAM  shift, and go to state 104


State 72

   37 assignment: IDENTIFIER ASSIGN . expression
   39           | IDENTIFIER ASSIGN . functioncall
   40           | IDENTIFIER ASSIGN . io

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    OUTPUT      shift, and go to state 34
    INPUT       shift, and go to state 35
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 105

    functioncall  go to state 106
    io            go to state 107
    ref           go to state 51
    array         go to state 63
    expression    go to state 108
    assignexp     go to state 54
    logicexp      go to state 55
    equalityexp   go to state 56
    relationexp   go to state 57
    addexp        go to state 58
    multexp       go to state 59
    term          go to state 60


State 73

   41 functioncall: IDENTIFIER BEGINPARAM . passingargs ENDPARAM

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    $default  reduce using rule 43 (passingargs)

    passingargs  go to state 109
    ref          go to state 51
    array        go to state 63
    expression   go to state 110
    assignexp    go to state 54
    logicexp     go to state 55
    equalityexp  go to state 56
    relationexp  go to state 57
    addexp       go to state 58
    multexp      go to state 59
    term         go to state 60


State 74

   37 assignment: IDENTIFIER . ASSIGN expression
   39           | IDENTIFIER . ASSIGN functioncall
   40           | IDENTIFIER . ASSIGN io
   46 declaration: type IDENTIFIER .
   53 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET

    ASSIGN        shift, and go to state 72
    BEGINBRACKET  shift, and go to state 26

    $default  reduce using rule 46 (declaration)


State 75

   47 declaration: type assignment .

    $default  reduce using rule 47 (declaration)


State 76

   38 assignment: array . ASSIGN expression
   48 declaration: type array .

    ASSIGN  shift, and go to state 80

    $default  reduce using rule 48 (declaration)


State 77

    5 function: type FUNCTION IDENTIFIER BEGINPARAM arguements ENDPARAM BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 5 (function)


State 78

   19 statements: controlstmt statements .

    $default  reduce using rule 19 (statements)


State 79

   18 statements: statement SEMICOLON . statements

    INTEGER     shift, and go to state 1
    DOUBLE      shift, and go to state 2
    BOOLEAN     shift, and go to state 3
    CHAR        shift, and go to state 4
    BEGINPARAM  shift, and go to state 27
    IF          shift, and go to state 28
    WHILE       shift, and go to state 29
    CONTINUE    shift, and go to state 30
    BREAK       shift, and go to state 31
    RETURN      shift, and go to state 32
    VOID        shift, and go to state 5
    NOT         shift, and go to state 33
    OUTPUT      shift, and go to state 34
    INPUT       shift, and go to state 35
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 37

    $default  reduce using rule 20 (statements)

    type          go to state 38
    statements    go to state 111
    controlstmt   go to state 40
    statement     go to state 41
    whilestmt     go to state 42
    continuestmt  go to state 43
    breakstmt     go to state 44
    returnstmt    go to state 45
    ifstmt        go to state 46
    assignment    go to state 47
    functioncall  go to state 48
    declaration   go to state 49
    io            go to state 50
    ref           go to state 51
    array         go to state 52
    expression    go to state 53
    assignexp     go to state 54
    logicexp      go to state 55
    equalityexp   go to state 56
    relationexp   go to state 57
    addexp        go to state 58
    multexp       go to state 59
    term          go to state 60


State 80

   38 assignment: array ASSIGN . expression

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    ref          go to state 51
    array        go to state 63
    expression   go to state 112
    assignexp    go to state 54
    logicexp     go to state 55
    equalityexp  go to state 56
    relationexp  go to state 57
    addexp       go to state 58
    multexp      go to state 59
    term         go to state 60


State 81

   57 logicop: AND .

    $default  reduce using rule 57 (logicop)


State 82

   58 logicop: OR .

    $default  reduce using rule 58 (logicop)


State 83

   55 assignexp: logicexp logicop . assignexp

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    ref          go to state 51
    array        go to state 63
    assignexp    go to state 113
    logicexp     go to state 55
    equalityexp  go to state 56
    relationexp  go to state 57
    addexp       go to state 58
    multexp      go to state 59
    term         go to state 60


State 84

   61 eqop: EQ .

    $default  reduce using rule 61 (eqop)


State 85

   62 eqop: NE .

    $default  reduce using rule 62 (eqop)


State 86

   59 logicexp: equalityexp eqop . logicexp

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    ref          go to state 51
    array        go to state 63
    logicexp     go to state 114
    equalityexp  go to state 56
    relationexp  go to state 57
    addexp       go to state 58
    multexp      go to state 59
    term         go to state 60


State 87

   65 relop: LT .

    $default  reduce using rule 65 (relop)


State 88

   66 relop: LTE .

    $default  reduce using rule 66 (relop)


State 89

   67 relop: GT .

    $default  reduce using rule 67 (relop)


State 90

   68 relop: GTE .

    $default  reduce using rule 68 (relop)


State 91

   63 equalityexp: relationexp relop . equalityexp

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    ref          go to state 51
    array        go to state 63
    equalityexp  go to state 115
    relationexp  go to state 57
    addexp       go to state 58
    multexp      go to state 59
    term         go to state 60


State 92

   71 addop: ADD .

    $default  reduce using rule 71 (addop)


State 93

   72 addop: SUB .

    $default  reduce using rule 72 (addop)


State 94

   69 relationexp: addexp addop . relationexp

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    ref          go to state 51
    array        go to state 63
    relationexp  go to state 116
    addexp       go to state 58
    multexp      go to state 59
    term         go to state 60


State 95

   76 multop: DIV .

    $default  reduce using rule 76 (multop)


State 96

   75 multop: MUL .

    $default  reduce using rule 75 (multop)


State 97

   77 multop: MOD .

    $default  reduce using rule 77 (multop)


State 98

   73 addexp: multexp multop . addexp

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    ref      go to state 51
    array    go to state 63
    addexp   go to state 117
    multexp  go to state 59
    term     go to state 60


State 99

   53 array: IDENTIFIER BEGINBRACKET expression ENDBRACKET .

    $default  reduce using rule 53 (array)


State 100

   80 term: BEGINPARAM expression ENDPARAM .

    $default  reduce using rule 80 (term)


State 101

   35 ifstmt: IF BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE
   36       | IF BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 118


State 102

   31 whilestmt: WHILE BEGINPARAM expression . ENDPARAM BEGINSCOPE statements ENDSCOPE

    ENDPARAM  shift, and go to state 119


State 103

   50 io: OUTPUT BEGINPARAM ref . ENDPARAM

    ENDPARAM  shift, and go to state 120


State 104

   49 io: INPUT BEGINPARAM ENDPARAM .

    $default  reduce using rule 49 (io)


State 105

   41 functioncall: IDENTIFIER . BEGINPARAM passingargs ENDPARAM
   51 ref: IDENTIFIER .
   53 array: IDENTIFIER . BEGINBRACKET expression ENDBRACKET

    BEGINPARAM    shift, and go to state 73
    BEGINBRACKET  shift, and go to state 26

    $default  reduce using rule 51 (ref)


State 106

   39 assignment: IDENTIFIER ASSIGN functioncall .

    $default  reduce using rule 39 (assignment)


State 107

   40 assignment: IDENTIFIER ASSIGN io .

    $default  reduce using rule 40 (assignment)


State 108

   37 assignment: IDENTIFIER ASSIGN expression .

    $default  reduce using rule 37 (assignment)


State 109

   41 functioncall: IDENTIFIER BEGINPARAM passingargs . ENDPARAM

    ENDPARAM  shift, and go to state 121


State 110

   42 passingargs: expression . repeat_passingargs

    COMMA  shift, and go to state 122

    $default  reduce using rule 45 (repeat_passingargs)

    repeat_passingargs  go to state 123


State 111

   18 statements: statement SEMICOLON statements .

    $default  reduce using rule 18 (statements)


State 112

   38 assignment: array ASSIGN expression .

    $default  reduce using rule 38 (assignment)


State 113

   55 assignexp: logicexp logicop assignexp .

    $default  reduce using rule 55 (assignexp)


State 114

   59 logicexp: equalityexp eqop logicexp .

    $default  reduce using rule 59 (logicexp)


State 115

   63 equalityexp: relationexp relop equalityexp .

    $default  reduce using rule 63 (equalityexp)


State 116

   69 relationexp: addexp addop relationexp .

    $default  reduce using rule 69 (relationexp)


State 117

   73 addexp: multexp multop addexp .

    $default  reduce using rule 73 (addexp)


State 118

   35 ifstmt: IF BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE
   36       | IF BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 124


State 119

   31 whilestmt: WHILE BEGINPARAM expression ENDPARAM . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 125


State 120

   50 io: OUTPUT BEGINPARAM ref ENDPARAM .

    $default  reduce using rule 50 (io)


State 121

   41 functioncall: IDENTIFIER BEGINPARAM passingargs ENDPARAM .

    $default  reduce using rule 41 (functioncall)


State 122

   44 repeat_passingargs: COMMA . expression repeat_arguements

    BEGINPARAM  shift, and go to state 27
    NOT         shift, and go to state 33
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 62

    ref          go to state 51
    array        go to state 63
    expression   go to state 126
    assignexp    go to state 54
    logicexp     go to state 55
    equalityexp  go to state 56
    relationexp  go to state 57
    addexp       go to state 58
    multexp      go to state 59
    term         go to state 60


State 123

   42 passingargs: expression repeat_passingargs .

    $default  reduce using rule 42 (passingargs)


State 124

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE
   36       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    INTEGER     shift, and go to state 1
    DOUBLE      shift, and go to state 2
    BOOLEAN     shift, and go to state 3
    CHAR        shift, and go to state 4
    BEGINPARAM  shift, and go to state 27
    IF          shift, and go to state 28
    WHILE       shift, and go to state 29
    CONTINUE    shift, and go to state 30
    BREAK       shift, and go to state 31
    RETURN      shift, and go to state 32
    VOID        shift, and go to state 5
    NOT         shift, and go to state 33
    OUTPUT      shift, and go to state 34
    INPUT       shift, and go to state 35
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 37

    $default  reduce using rule 20 (statements)

    type          go to state 38
    statements    go to state 127
    controlstmt   go to state 40
    statement     go to state 41
    whilestmt     go to state 42
    continuestmt  go to state 43
    breakstmt     go to state 44
    returnstmt    go to state 45
    ifstmt        go to state 46
    assignment    go to state 47
    functioncall  go to state 48
    declaration   go to state 49
    io            go to state 50
    ref           go to state 51
    array         go to state 52
    expression    go to state 53
    assignexp     go to state 54
    logicexp      go to state 55
    equalityexp   go to state 56
    relationexp   go to state 57
    addexp        go to state 58
    multexp       go to state 59
    term          go to state 60


State 125

   31 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE . statements ENDSCOPE

    INTEGER     shift, and go to state 1
    DOUBLE      shift, and go to state 2
    BOOLEAN     shift, and go to state 3
    CHAR        shift, and go to state 4
    BEGINPARAM  shift, and go to state 27
    IF          shift, and go to state 28
    WHILE       shift, and go to state 29
    CONTINUE    shift, and go to state 30
    BREAK       shift, and go to state 31
    RETURN      shift, and go to state 32
    VOID        shift, and go to state 5
    NOT         shift, and go to state 33
    OUTPUT      shift, and go to state 34
    INPUT       shift, and go to state 35
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 37

    $default  reduce using rule 20 (statements)

    type          go to state 38
    statements    go to state 128
    controlstmt   go to state 40
    statement     go to state 41
    whilestmt     go to state 42
    continuestmt  go to state 43
    breakstmt     go to state 44
    returnstmt    go to state 45
    ifstmt        go to state 46
    assignment    go to state 47
    functioncall  go to state 48
    declaration   go to state 49
    io            go to state 50
    ref           go to state 51
    array         go to state 52
    expression    go to state 53
    assignexp     go to state 54
    logicexp      go to state 55
    equalityexp   go to state 56
    relationexp   go to state 57
    addexp        go to state 58
    multexp       go to state 59
    term          go to state 60


State 126

   44 repeat_passingargs: COMMA expression . repeat_arguements

    COMMA  shift, and go to state 19

    $default  reduce using rule 10 (repeat_arguements)

    repeat_arguements  go to state 129


State 127

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE
   36       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE

    ENDSCOPE  shift, and go to state 130


State 128

   31 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 131


State 129

   44 repeat_passingargs: COMMA expression repeat_arguements .

    $default  reduce using rule 44 (repeat_passingargs)


State 130

   35 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE .
   36       | IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE . ELSE BEGINSCOPE statements ENDSCOPE

    ELSE  shift, and go to state 132

    $default  reduce using rule 35 (ifstmt)


State 131

   31 whilestmt: WHILE BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 31 (whilestmt)


State 132

   36 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE . BEGINSCOPE statements ENDSCOPE

    BEGINSCOPE  shift, and go to state 133


State 133

   36 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE . statements ENDSCOPE

    INTEGER     shift, and go to state 1
    DOUBLE      shift, and go to state 2
    BOOLEAN     shift, and go to state 3
    CHAR        shift, and go to state 4
    BEGINPARAM  shift, and go to state 27
    IF          shift, and go to state 28
    WHILE       shift, and go to state 29
    CONTINUE    shift, and go to state 30
    BREAK       shift, and go to state 31
    RETURN      shift, and go to state 32
    VOID        shift, and go to state 5
    NOT         shift, and go to state 33
    OUTPUT      shift, and go to state 34
    INPUT       shift, and go to state 35
    NUMBER      shift, and go to state 36
    IDENTIFIER  shift, and go to state 37

    $default  reduce using rule 20 (statements)

    type          go to state 38
    statements    go to state 134
    controlstmt   go to state 40
    statement     go to state 41
    whilestmt     go to state 42
    continuestmt  go to state 43
    breakstmt     go to state 44
    returnstmt    go to state 45
    ifstmt        go to state 46
    assignment    go to state 47
    functioncall  go to state 48
    declaration   go to state 49
    io            go to state 50
    ref           go to state 51
    array         go to state 52
    expression    go to state 53
    assignexp     go to state 54
    logicexp      go to state 55
    equalityexp   go to state 56
    relationexp   go to state 57
    addexp        go to state 58
    multexp       go to state 59
    term          go to state 60


State 134

   36 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements . ENDSCOPE

    ENDSCOPE  shift, and go to state 135


State 135

   36 ifstmt: IF BEGINPARAM expression ENDPARAM BEGINSCOPE statements ENDSCOPE ELSE BEGINSCOPE statements ENDSCOPE .

    $default  reduce using rule 36 (ifstmt)
